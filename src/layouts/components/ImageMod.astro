---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";

interface Props {
  src: string;
  alt?: string;
  width?: number;
  height?: number;
  loading?: "eager" | "lazy";
  decoding?: "async" | "auto" | "sync";
  format?: "auto" | "avif" | "jpeg" | "png" | "svg" | "webp";
  class?: string;
  style?: any;
}

let {
  src,
  alt = "",
  width,
  height,
  loading = "lazy",
  decoding = "async",
  format = "webp",
  class: className = "",
  style = {},
} = Astro.props;

const isExternal = typeof src === "string" && src.startsWith("http");

const localPath = `/public${src}`;
const images = import.meta.glob("/public/images/**/*.{jpeg,jpg,png,gif,svg,webp}");
const isValidLocal = images[localPath];
---

{isExternal ? (
  <img
    src={src}
    alt={alt}
    class={className}
    width={width}
    height={height}
    loading={loading}
    decoding={decoding}
    style={style}
  />
) : isValidLocal ? (
  <Image
    src={images[localPath]() as Promise<{ default: ImageMetadata }>}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    decoding={decoding}
    format={format}
    class={className}
    style={style}
  />
) : (
  <img
    src={src}
    alt={alt}
    class={className}
    width={width}
    height={height}
    loading={loading}
    decoding={decoding}
    style={style}
  />
)}
