{
  "version": 3,
  "sources": ["../../astro/dist/core/errors/errors-data.js", "../../astro/dist/core/errors/utils.js", "../../astro/dist/core/errors/printer.js", "../../astro/dist/core/errors/errors.js", "../../@astrojs/internal-helpers/dist/path.js", "../../astro/dist/core/build/util.js", "../../astro/dist/core/constants.js", "../../kleur/colors.mjs", "../../html-escaper/esm/index.js", "../../astro/dist/runtime/server/util.js", "../../astro/dist/runtime/server/escape.js", "../../astro/dist/jsx-runtime/index.js", "../../astro/dist/runtime/server/render/instruction.js", "../../astro/dist/runtime/server/hydration.js", "../../astro/dist/runtime/server/shorthash.js", "../../astro/dist/runtime/server/render/astro/head-and-content.js", "../../astro/dist/runtime/server/render/util.js", "../../astro/dist/runtime/server/render/astro/render-template.js", "../../astro/dist/runtime/server/render/slot.js", "../../astro/dist/runtime/server/render/common.js", "../../astro/dist/runtime/server/render/any.js", "../../astro/dist/runtime/server/render/astro/instance.js", "../../@oslojs/encoding/dist/base32.js", "../../@oslojs/encoding/dist/base64.js", "../../astro/dist/core/encryption.js", "../../astro/dist/runtime/server/render/component.js", "../../astro/dist/runtime/server/jsx.js", "../../astro/dist/runtime/server/transition.js", "../../astro/dist/core/server-islands/endpoint.js", "../../astro/dist/core/routing/match.js", "../../astro/dist/i18n/middleware.js", "../../astro/dist/i18n/index.js", "../../astro/dist/i18n/utils.js", "../../astro/dist/virtual-modules/i18n.js"],
  "sourcesContent": ["const CantUseAstroConfigModuleError = {\n  name: \"CantUseAstroConfigModuleError\",\n  title: \"Cannot use the `astro:config` module without enabling the experimental feature.\",\n  message: (moduleName) => `Cannot import the module \"${moduleName}\" because the experimental feature is disabled. Enable \\`experimental.serializeConfig\\` in your \\`astro.config.mjs\\` `\n};\nconst UnknownCompilerError = {\n  name: \"UnknownCompilerError\",\n  title: \"Unknown compiler error.\",\n  hint: \"This is almost always a problem with the Astro compiler, not your code. Please open an issue at https://astro.build/issues/compiler.\"\n};\nconst ClientAddressNotAvailable = {\n  name: \"ClientAddressNotAvailable\",\n  title: \"`Astro.clientAddress` is not available in current adapter.\",\n  message: (adapterName) => `\\`Astro.clientAddress\\` is not available in the \\`${adapterName}\\` adapter. File an issue with the adapter to add support.`\n};\nconst PrerenderClientAddressNotAvailable = {\n  name: \"PrerenderClientAddressNotAvailable\",\n  title: \"`Astro.clientAddress` cannot be used inside prerendered routes.\",\n  message: `\\`Astro.clientAddress\\` cannot be used inside prerendered routes`\n};\nconst StaticClientAddressNotAvailable = {\n  name: \"StaticClientAddressNotAvailable\",\n  title: \"`Astro.clientAddress` is not available in prerendered pages.\",\n  message: \"`Astro.clientAddress` is only available on pages that are server-rendered.\",\n  hint: \"See https://docs.astro.build/en/guides/on-demand-rendering/ for more information on how to enable SSR.\"\n};\nconst NoMatchingStaticPathFound = {\n  name: \"NoMatchingStaticPathFound\",\n  title: \"No static path found for requested path.\",\n  message: (pathName) => `A \\`getStaticPaths()\\` route pattern was matched, but no matching static path was found for requested path \\`${pathName}\\`.`,\n  hint: (possibleRoutes) => `Possible dynamic routes being matched: ${possibleRoutes.join(\", \")}.`\n};\nconst OnlyResponseCanBeReturned = {\n  name: \"OnlyResponseCanBeReturned\",\n  title: \"Invalid type returned by Astro page.\",\n  message: (route, returnedValue) => `Route \\`${route ? route : \"\"}\\` returned a \\`${returnedValue}\\`. Only a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) can be returned from Astro files.`,\n  hint: \"See https://docs.astro.build/en/guides/on-demand-rendering/#response for more information.\"\n};\nconst MissingMediaQueryDirective = {\n  name: \"MissingMediaQueryDirective\",\n  title: \"Missing value for `client:media` directive.\",\n  message: 'Media query not provided for `client:media` directive. A media query similar to `client:media=\"(max-width: 600px)\"` must be provided'\n};\nconst NoMatchingRenderer = {\n  name: \"NoMatchingRenderer\",\n  title: \"No matching renderer found.\",\n  message: (componentName, componentExtension, plural, validRenderersCount) => `Unable to render \\`${componentName}\\`.\n\n${validRenderersCount > 0 ? `There ${plural ? \"are\" : \"is\"} ${validRenderersCount} renderer${plural ? \"s\" : \"\"} configured in your \\`astro.config.mjs\\` file,\nbut ${plural ? \"none were\" : \"it was not\"} able to server-side render \\`${componentName}\\`.` : `No valid renderer was found ${componentExtension ? `for the \\`.${componentExtension}\\` file extension.` : `for this file extension.`}`}`,\n  hint: (probableRenderers) => `Did you mean to enable the ${probableRenderers} integration?\n\nSee https://docs.astro.build/en/guides/framework-components/ for more information on how to install and configure integrations.`\n};\nconst NoClientEntrypoint = {\n  name: \"NoClientEntrypoint\",\n  title: \"No client entrypoint specified in renderer.\",\n  message: (componentName, clientDirective, rendererName) => `\\`${componentName}\\` component has a \\`client:${clientDirective}\\` directive, but no client entrypoint was provided by \\`${rendererName}\\`.`,\n  hint: \"See https://docs.astro.build/en/reference/integrations-reference/#addrenderer-option for more information on how to configure your renderer.\"\n};\nconst NoClientOnlyHint = {\n  name: \"NoClientOnlyHint\",\n  title: \"Missing hint on client:only directive.\",\n  message: (componentName) => `Unable to render \\`${componentName}\\`. When using the \\`client:only\\` hydration strategy, Astro needs a hint to use the correct renderer.`,\n  hint: (probableRenderers) => `Did you mean to pass \\`client:only=\"${probableRenderers}\"\\`? See https://docs.astro.build/en/reference/directives-reference/#clientonly for more information on client:only`\n};\nconst InvalidGetStaticPathParam = {\n  name: \"InvalidGetStaticPathParam\",\n  title: \"Invalid value returned by a `getStaticPaths` path.\",\n  message: (paramType) => `Invalid params given to \\`getStaticPaths\\` path. Expected an \\`object\\`, got \\`${paramType}\\``,\n  hint: \"See https://docs.astro.build/en/reference/routing-reference/#getstaticpaths for more information on getStaticPaths.\"\n};\nconst InvalidGetStaticPathsEntry = {\n  name: \"InvalidGetStaticPathsEntry\",\n  title: \"Invalid entry inside getStaticPath's return value\",\n  message: (entryType) => `Invalid entry returned by getStaticPaths. Expected an object, got \\`${entryType}\\``,\n  hint: \"If you're using a `.map` call, you might be looking for `.flatMap()` instead. See https://docs.astro.build/en/reference/routing-reference/#getstaticpaths for more information on getStaticPaths.\"\n};\nconst InvalidGetStaticPathsReturn = {\n  name: \"InvalidGetStaticPathsReturn\",\n  title: \"Invalid value returned by getStaticPaths.\",\n  message: (returnType) => `Invalid type returned by \\`getStaticPaths\\`. Expected an \\`array\\`, got \\`${returnType}\\``,\n  hint: \"See https://docs.astro.build/en/reference/routing-reference/#getstaticpaths for more information on getStaticPaths.\"\n};\nconst GetStaticPathsExpectedParams = {\n  name: \"GetStaticPathsExpectedParams\",\n  title: \"Missing params property on `getStaticPaths` route.\",\n  message: \"Missing or empty required `params` property on `getStaticPaths` route.\",\n  hint: \"See https://docs.astro.build/en/reference/routing-reference/#getstaticpaths for more information on getStaticPaths.\"\n};\nconst GetStaticPathsInvalidRouteParam = {\n  name: \"GetStaticPathsInvalidRouteParam\",\n  title: \"Invalid value for `getStaticPaths` route parameter.\",\n  message: (key, value, valueType) => `Invalid getStaticPaths route parameter for \\`${key}\\`. Expected undefined, a string or a number, received \\`${valueType}\\` (\\`${value}\\`)`,\n  hint: \"See https://docs.astro.build/en/reference/routing-reference/#getstaticpaths for more information on getStaticPaths.\"\n};\nconst GetStaticPathsRequired = {\n  name: \"GetStaticPathsRequired\",\n  title: \"`getStaticPaths()` function required for dynamic routes.\",\n  message: \"`getStaticPaths()` function is required for dynamic routes. Make sure that you `export` a `getStaticPaths` function from your dynamic route.\",\n  hint: `See https://docs.astro.build/en/guides/routing/#dynamic-routes for more information on dynamic routes.\n\n\tIf you meant for this route to be server-rendered, set \\`export const prerender = false;\\` in the page.`\n};\nconst ReservedSlotName = {\n  name: \"ReservedSlotName\",\n  title: \"Invalid slot name.\",\n  message: (slotName) => `Unable to create a slot named \\`${slotName}\\`. \\`${slotName}\\` is a reserved slot name. Please update the name of this slot.`\n};\nconst NoAdapterInstalled = {\n  name: \"NoAdapterInstalled\",\n  title: \"Cannot use Server-side Rendering without an adapter.\",\n  message: `Cannot use server-rendered pages without an adapter. Please install and configure the appropriate server adapter for your final deployment.`,\n  hint: \"See https://docs.astro.build/en/guides/on-demand-rendering/ for more information.\"\n};\nconst AdapterSupportOutputMismatch = {\n  name: \"AdapterSupportOutputMismatch\",\n  title: \"Adapter does not support server output.\",\n  message: (adapterName) => `The \\`${adapterName}\\` adapter is configured to output a static website, but the project contains server-rendered pages. Please install and configure the appropriate server adapter for your final deployment.`\n};\nconst NoAdapterInstalledServerIslands = {\n  name: \"NoAdapterInstalledServerIslands\",\n  title: \"Cannot use Server Islands without an adapter.\",\n  message: `Cannot use server islands without an adapter. Please install and configure the appropriate server adapter for your final deployment.`,\n  hint: \"See https://docs.astro.build/en/guides/on-demand-rendering/ for more information.\"\n};\nconst NoMatchingImport = {\n  name: \"NoMatchingImport\",\n  title: \"No import found for component.\",\n  message: (componentName) => `Could not render \\`${componentName}\\`. No matching import has been found for \\`${componentName}\\`.`,\n  hint: \"Please make sure the component is properly imported.\"\n};\nconst InvalidPrerenderExport = {\n  name: \"InvalidPrerenderExport\",\n  title: \"Invalid prerender export.\",\n  message(prefix, suffix, isHydridOutput) {\n    const defaultExpectedValue = isHydridOutput ? \"false\" : \"true\";\n    let msg = `A \\`prerender\\` export has been detected, but its value cannot be statically analyzed.`;\n    if (prefix !== \"const\") msg += `\nExpected \\`const\\` declaration but got \\`${prefix}\\`.`;\n    if (suffix !== \"true\")\n      msg += `\nExpected \\`${defaultExpectedValue}\\` value but got \\`${suffix}\\`.`;\n    return msg;\n  },\n  hint: \"Mutable values declared at runtime are not supported. Please make sure to use exactly `export const prerender = true`.\"\n};\nconst InvalidComponentArgs = {\n  name: \"InvalidComponentArgs\",\n  title: \"Invalid component arguments.\",\n  message: (name) => `Invalid arguments passed to${name ? ` <${name}>` : \"\"} component.`,\n  hint: \"Astro components cannot be rendered directly via function call, such as `Component()` or `{items.map(Component)}`.\"\n};\nconst PageNumberParamNotFound = {\n  name: \"PageNumberParamNotFound\",\n  title: \"Page number param not found.\",\n  message: (paramName) => `[paginate()] page number param \\`${paramName}\\` not found in your filepath.`,\n  hint: \"Rename your file to `[page].astro` or `[...page].astro`.\"\n};\nconst ImageMissingAlt = {\n  name: \"ImageMissingAlt\",\n  title: 'Image missing required \"alt\" property.',\n  message: 'Image missing \"alt\" property. \"alt\" text is required to describe important images on the page.',\n  hint: 'Use an empty string (\"\") for decorative images.'\n};\nconst InvalidImageService = {\n  name: \"InvalidImageService\",\n  title: \"Error while loading image service.\",\n  message: \"There was an error loading the configured image service. Please see the stack trace for more information.\"\n};\nconst MissingImageDimension = {\n  name: \"MissingImageDimension\",\n  title: \"Missing image dimensions\",\n  message: (missingDimension, imageURL) => `Missing ${missingDimension === \"both\" ? \"width and height attributes\" : `${missingDimension} attribute`} for ${imageURL}. When using remote images, both dimensions are required in order to avoid CLS.`,\n  hint: \"If your image is inside your `src` folder, you probably meant to import it instead. See [the Imports guide for more information](https://docs.astro.build/en/guides/imports/#other-assets). You can also use `inferSize={true}` for remote images to get the original dimensions.\"\n};\nconst FailedToFetchRemoteImageDimensions = {\n  name: \"FailedToFetchRemoteImageDimensions\",\n  title: \"Failed to retrieve remote image dimensions\",\n  message: (imageURL) => `Failed to get the dimensions for ${imageURL}.`,\n  hint: \"Verify your remote image URL is accurate, and that you are not using `inferSize` with a file located in your `public/` folder.\"\n};\nconst UnsupportedImageFormat = {\n  name: \"UnsupportedImageFormat\",\n  title: \"Unsupported image format\",\n  message: (format, imagePath, supportedFormats) => `Received unsupported format \\`${format}\\` from \\`${imagePath}\\`. Currently only ${supportedFormats.join(\n    \", \"\n  )} are supported by our image services.`,\n  hint: \"Using an `img` tag directly instead of the `Image` component might be what you're looking for.\"\n};\nconst UnsupportedImageConversion = {\n  name: \"UnsupportedImageConversion\",\n  title: \"Unsupported image conversion\",\n  message: \"Converting between vector (such as SVGs) and raster (such as PNGs and JPEGs) images is not currently supported.\"\n};\nconst PrerenderDynamicEndpointPathCollide = {\n  name: \"PrerenderDynamicEndpointPathCollide\",\n  title: \"Prerendered dynamic endpoint has path collision.\",\n  message: (pathname) => `Could not render \\`${pathname}\\` with an \\`undefined\\` param as the generated path will collide during prerendering. Prevent passing \\`undefined\\` as \\`params\\` for the endpoint's \\`getStaticPaths()\\` function, or add an additional extension to the endpoint's filename.`,\n  hint: (filename) => `Rename \\`${filename}\\` to \\`${filename.replace(/\\.(?:js|ts)/, (m) => `.json` + m)}\\``\n};\nconst ExpectedImage = {\n  name: \"ExpectedImage\",\n  title: \"Expected src to be an image.\",\n  message: (src, typeofOptions, fullOptions) => `Expected \\`src\\` property for \\`getImage\\` or \\`<Image />\\` to be either an ESM imported image or a string with the path of a remote image. Received \\`${src}\\` (type: \\`${typeofOptions}\\`).\n\nFull serialized options received: \\`${fullOptions}\\`.`,\n  hint: \"This error can often happen because of a wrong path. Make sure the path to your image is correct. If you're passing an async function, make sure to call and await it.\"\n};\nconst ExpectedImageOptions = {\n  name: \"ExpectedImageOptions\",\n  title: \"Expected image options.\",\n  message: (options) => `Expected getImage() parameter to be an object. Received \\`${options}\\`.`\n};\nconst ExpectedNotESMImage = {\n  name: \"ExpectedNotESMImage\",\n  title: \"Expected image options, not an ESM-imported image.\",\n  message: \"An ESM-imported image cannot be passed directly to `getImage()`. Instead, pass an object with the image in the `src` property.\",\n  hint: \"Try changing `getImage(myImage)` to `getImage({ src: myImage })`\"\n};\nconst IncompatibleDescriptorOptions = {\n  name: \"IncompatibleDescriptorOptions\",\n  title: \"Cannot set both `densities` and `widths`\",\n  message: \"Only one of `densities` or `widths` can be specified. In most cases, you'll probably want to use only `widths` if you require specific widths.\",\n  hint: \"Those attributes are used to construct a `srcset` attribute, which cannot have both `x` and `w` descriptors.\"\n};\nconst ImageNotFound = {\n  name: \"ImageNotFound\",\n  title: \"Image not found.\",\n  message: (imagePath) => `Could not find requested image \\`${imagePath}\\`. Does it exist?`,\n  hint: \"This is often caused by a typo in the image path. Please make sure the file exists, and is spelled correctly.\"\n};\nconst NoImageMetadata = {\n  name: \"NoImageMetadata\",\n  title: \"Could not process image metadata.\",\n  message: (imagePath) => `Could not process image metadata${imagePath ? ` for \\`${imagePath}\\`` : \"\"}.`,\n  hint: \"This is often caused by a corrupted or malformed image. Re-exporting the image from your image editor may fix this issue.\"\n};\nconst CouldNotTransformImage = {\n  name: \"CouldNotTransformImage\",\n  title: \"Could not transform image.\",\n  message: (imagePath) => `Could not transform image \\`${imagePath}\\`. See the stack trace for more information.`,\n  hint: \"This is often caused by a corrupted or malformed image. Re-exporting the image from your image editor may fix this issue.\"\n};\nconst ResponseSentError = {\n  name: \"ResponseSentError\",\n  title: \"Unable to set response.\",\n  message: \"The response has already been sent to the browser and cannot be altered.\"\n};\nconst MiddlewareNoDataOrNextCalled = {\n  name: \"MiddlewareNoDataOrNextCalled\",\n  title: \"The middleware didn't return a `Response`.\",\n  message: \"Make sure your middleware returns a `Response` object, either directly or by returning the `Response` from calling the `next` function.\"\n};\nconst MiddlewareNotAResponse = {\n  name: \"MiddlewareNotAResponse\",\n  title: \"The middleware returned something that is not a `Response` object.\",\n  message: \"Any data returned from middleware must be a valid `Response` object.\"\n};\nconst EndpointDidNotReturnAResponse = {\n  name: \"EndpointDidNotReturnAResponse\",\n  title: \"The endpoint did not return a `Response`.\",\n  message: \"An endpoint must return either a `Response`, or a `Promise` that resolves with a `Response`.\"\n};\nconst LocalsNotAnObject = {\n  name: \"LocalsNotAnObject\",\n  title: \"Value assigned to `locals` is not accepted.\",\n  message: \"`locals` can only be assigned to an object. Other values like numbers, strings, etc. are not accepted.\",\n  hint: \"If you tried to remove some information from the `locals` object, try to use `delete` or set the property to `undefined`.\"\n};\nconst LocalsReassigned = {\n  name: \"LocalsReassigned\",\n  title: \"`locals` must not be reassigned.\",\n  message: \"`locals` can not be assigned directly.\",\n  hint: \"Set a `locals` property instead.\"\n};\nconst AstroResponseHeadersReassigned = {\n  name: \"AstroResponseHeadersReassigned\",\n  title: \"`Astro.response.headers` must not be reassigned.\",\n  message: \"Individual headers can be added to and removed from `Astro.response.headers`, but it must not be replaced with another instance of `Headers` altogether.\",\n  hint: \"Consider using `Astro.response.headers.add()`, and `Astro.response.headers.delete()`.\"\n};\nconst MiddlewareCantBeLoaded = {\n  name: \"MiddlewareCantBeLoaded\",\n  title: \"Can't load the middleware.\",\n  message: \"An unknown error was thrown while loading your middleware.\"\n};\nconst LocalImageUsedWrongly = {\n  name: \"LocalImageUsedWrongly\",\n  title: \"Local images must be imported.\",\n  message: (imageFilePath) => `\\`Image\\`'s and \\`getImage\\`'s \\`src\\` parameter must be an imported image or an URL, it cannot be a string filepath. Received \\`${imageFilePath}\\`.`,\n  hint: \"If you want to use an image from your `src` folder, you need to either import it or if the image is coming from a content collection, use the [image() schema helper](https://docs.astro.build/en/guides/images/#images-in-content-collections). See https://docs.astro.build/en/guides/images/#src-required for more information on the `src` property.\"\n};\nconst AstroGlobUsedOutside = {\n  name: \"AstroGlobUsedOutside\",\n  title: \"Astro.glob() used outside of an Astro file.\",\n  message: (globStr) => `\\`Astro.glob(${globStr})\\` can only be used in \\`.astro\\` files. \\`import.meta.glob(${globStr})\\` can be used instead to achieve a similar result.`,\n  hint: \"See Vite's documentation on `import.meta.glob` for more information: https://vite.dev/guide/features.html#glob-import\"\n};\nconst AstroGlobNoMatch = {\n  name: \"AstroGlobNoMatch\",\n  title: \"Astro.glob() did not match any files.\",\n  message: (globStr) => `\\`Astro.glob(${globStr})\\` did not return any matching files.`,\n  hint: \"Check the pattern for typos.\"\n};\nconst RedirectWithNoLocation = {\n  name: \"RedirectWithNoLocation\",\n  title: \"A redirect must be given a location with the `Location` header.\"\n};\nconst UnsupportedExternalRedirect = {\n  name: \"UnsupportedExternalRedirect\",\n  title: \"Unsupported or malformed URL.\",\n  message: \"An external redirect must start with http or https, and must be a valid URL.\"\n};\nconst InvalidDynamicRoute = {\n  name: \"InvalidDynamicRoute\",\n  title: \"Invalid dynamic route.\",\n  message: (route, invalidParam, received) => `The ${invalidParam} param for route ${route} is invalid. Received **${received}**.`\n};\nconst MissingSharp = {\n  name: \"MissingSharp\",\n  title: \"Could not find Sharp.\",\n  message: \"Could not find Sharp. Please install Sharp (`sharp`) manually into your project or migrate to another image service.\",\n  hint: \"See Sharp's installation instructions for more information: https://sharp.pixelplumbing.com/install. If you are not relying on `astro:assets` to optimize, transform, or process any images, you can configure a passthrough image service instead of installing Sharp. See https://docs.astro.build/en/reference/errors/missing-sharp for more information.\\n\\nSee https://docs.astro.build/en/guides/images/#default-image-service for more information on how to migrate to another image service.\"\n};\nconst UnknownViteError = {\n  name: \"UnknownViteError\",\n  title: \"Unknown Vite Error.\"\n};\nconst FailedToLoadModuleSSR = {\n  name: \"FailedToLoadModuleSSR\",\n  title: \"Could not import file.\",\n  message: (importName) => `Could not import \\`${importName}\\`.`,\n  hint: \"This is often caused by a typo in the import path. Please make sure the file exists.\"\n};\nconst InvalidGlob = {\n  name: \"InvalidGlob\",\n  title: \"Invalid glob pattern.\",\n  message: (globPattern) => `Invalid glob pattern: \\`${globPattern}\\`. Glob patterns must start with './', '../' or '/'.`,\n  hint: \"See https://docs.astro.build/en/guides/imports/#glob-patterns for more information on supported glob patterns.\"\n};\nconst FailedToFindPageMapSSR = {\n  name: \"FailedToFindPageMapSSR\",\n  title: \"Astro couldn't find the correct page to render\",\n  message: \"Astro couldn't find the correct page to render, probably because it wasn't correctly mapped for SSR usage. This is an internal error. Please file an issue.\"\n};\nconst MissingLocale = {\n  name: \"MissingLocaleError\",\n  title: \"The provided locale does not exist.\",\n  message: (locale) => `The locale/path \\`${locale}\\` does not exist in the configured \\`i18n.locales\\`.`\n};\nconst MissingIndexForInternationalization = {\n  name: \"MissingIndexForInternationalizationError\",\n  title: \"Index page not found.\",\n  message: (defaultLocale) => `Could not find index page. A root index page is required in order to create a redirect to the index URL of the default locale. (\\`/${defaultLocale}\\`)`,\n  hint: (src) => `Create an index page (\\`index.astro, index.md, etc.\\`) in \\`${src}\\`.`\n};\nconst IncorrectStrategyForI18n = {\n  name: \"IncorrectStrategyForI18n\",\n  title: \"You can't use the current function with the current strategy\",\n  message: (functionName) => `The function \\`${functionName}\\` can only be used when the \\`i18n.routing.strategy\\` is set to \\`\"manual\"\\`.`\n};\nconst NoPrerenderedRoutesWithDomains = {\n  name: \"NoPrerenderedRoutesWithDomains\",\n  title: \"Prerendered routes aren't supported when internationalization domains are enabled.\",\n  message: (component) => `Static pages aren't yet supported with multiple domains. To enable this feature, you must disable prerendering for the page ${component}`\n};\nconst MissingMiddlewareForInternationalization = {\n  name: \"MissingMiddlewareForInternationalization\",\n  title: \"Enabled manual internationalization routing without having a middleware.\",\n  message: \"Your configuration setting `i18n.routing: 'manual'` requires you to provide your own i18n `middleware` file.\"\n};\nconst CantRenderPage = {\n  name: \"CantRenderPage\",\n  title: \"Astro can't render the route.\",\n  message: \"Astro cannot find any content to render for this route. There is no file or redirect associated with this route.\",\n  hint: \"If you expect to find a route here, this may be an Astro bug. Please file an issue/restart the dev server\"\n};\nconst UnhandledRejection = {\n  name: \"UnhandledRejection\",\n  title: \"Unhandled rejection\",\n  message: (stack) => `Astro detected an unhandled rejection. Here's the stack trace:\n${stack}`,\n  hint: \"Make sure your promises all have an `await` or a `.catch()` handler.\"\n};\nconst i18nNotEnabled = {\n  name: \"i18nNotEnabled\",\n  title: \"i18n Not Enabled\",\n  message: \"The `astro:i18n` module can not be used without enabling i18n in your Astro config.\",\n  hint: \"See https://docs.astro.build/en/guides/internationalization for a guide on setting up i18n.\"\n};\nconst i18nNoLocaleFoundInPath = {\n  name: \"i18nNoLocaleFoundInPath\",\n  title: \"The path doesn't contain any locale\",\n  message: \"You tried to use an i18n utility on a path that doesn't contain any locale. You can use `pathHasLocale` first to determine if the path has a locale.\"\n};\nconst RouteNotFound = {\n  name: \"RouteNotFound\",\n  title: \"Route not found.\",\n  message: `Astro could not find a route that matches the one you requested.`\n};\nconst EnvInvalidVariables = {\n  name: \"EnvInvalidVariables\",\n  title: \"Invalid Environment Variables\",\n  message: (errors) => `The following environment variables defined in \\`env.schema\\` are invalid:\n\n${errors.map((err) => `- ${err}`).join(\"\\n\")}\n`\n};\nconst ServerOnlyModule = {\n  name: \"ServerOnlyModule\",\n  title: \"Module is only available server-side\",\n  message: (name) => `The \"${name}\" module is only available server-side.`\n};\nconst RewriteWithBodyUsed = {\n  name: \"RewriteWithBodyUsed\",\n  title: \"Cannot use Astro.rewrite after the request body has been read\",\n  message: \"Astro.rewrite() cannot be used if the request body has already been read. If you need to read the body, first clone the request.\"\n};\nconst ForbiddenRewrite = {\n  name: \"ForbiddenRewrite\",\n  title: \"Forbidden rewrite to a static route.\",\n  message: (from, to, component) => `You tried to rewrite the on-demand route '${from}' with the static route '${to}', when using the 'server' output. \n\nThe static route '${to}' is rendered by the component\n'${component}', which is marked as prerendered. This is a forbidden operation because during the build the component '${component}' is compiled to an\nHTML file, which can't be retrieved at runtime by Astro.`,\n  hint: (component) => `Add \\`export const prerender = false\\` to the component '${component}', or use a Astro.redirect().`\n};\nconst UnknownFilesystemError = {\n  name: \"UnknownFilesystemError\",\n  title: \"An unknown error occurred while reading or writing files to disk.\",\n  hint: \"It can be caused by many things, eg. missing permissions or a file not existing we attempt to read. Check the error cause for more details.\"\n};\nconst UnknownCSSError = {\n  name: \"UnknownCSSError\",\n  title: \"Unknown CSS Error.\"\n};\nconst CSSSyntaxError = {\n  name: \"CSSSyntaxError\",\n  title: \"CSS Syntax Error.\"\n};\nconst UnknownMarkdownError = {\n  name: \"UnknownMarkdownError\",\n  title: \"Unknown Markdown Error.\"\n};\nconst MarkdownFrontmatterParseError = {\n  name: \"MarkdownFrontmatterParseError\",\n  title: \"Failed to parse Markdown frontmatter.\"\n};\nconst InvalidFrontmatterInjectionError = {\n  name: \"InvalidFrontmatterInjectionError\",\n  title: \"Invalid frontmatter injection.\",\n  message: 'A remark or rehype plugin attempted to inject invalid frontmatter. Ensure \"astro.frontmatter\" is set to a valid JSON object that is not `null` or `undefined`.',\n  hint: \"See the frontmatter injection docs https://docs.astro.build/en/guides/markdown-content/#modifying-frontmatter-programmatically for more information.\"\n};\nconst MdxIntegrationMissingError = {\n  name: \"MdxIntegrationMissingError\",\n  title: \"MDX integration missing.\",\n  message: (file) => `Unable to render ${file}. Ensure that the \\`@astrojs/mdx\\` integration is installed.`,\n  hint: \"See the MDX integration docs for installation and usage instructions: https://docs.astro.build/en/guides/integrations-guide/mdx/\"\n};\nconst UnknownConfigError = {\n  name: \"UnknownConfigError\",\n  title: \"Unknown configuration error.\"\n};\nconst ConfigNotFound = {\n  name: \"ConfigNotFound\",\n  title: \"Specified configuration file not found.\",\n  message: (configFile) => `Unable to resolve \\`--config \"${configFile}\"\\`. Does the file exist?`\n};\nconst ConfigLegacyKey = {\n  name: \"ConfigLegacyKey\",\n  title: \"Legacy configuration detected.\",\n  message: (legacyConfigKey) => `Legacy configuration detected: \\`${legacyConfigKey}\\`.`,\n  hint: \"Please update your configuration to the new format.\\nSee https://astro.build/config for more information.\"\n};\nconst UnknownCLIError = {\n  name: \"UnknownCLIError\",\n  title: \"Unknown CLI Error.\"\n};\nconst GenerateContentTypesError = {\n  name: \"GenerateContentTypesError\",\n  title: \"Failed to generate content types.\",\n  message: (errorMessage) => `\\`astro sync\\` command failed to generate content collection types: ${errorMessage}`,\n  hint: (fileName) => `This error is often caused by a syntax error inside your content, or your content configuration file. Check your ${fileName ?? \"content config\"} file for typos.`\n};\nconst UnknownContentCollectionError = {\n  name: \"UnknownContentCollectionError\",\n  title: \"Unknown Content Collection Error.\"\n};\nconst RenderUndefinedEntryError = {\n  name: \"RenderUndefinedEntryError\",\n  title: \"Attempted to render an undefined content collection entry.\",\n  hint: \"Check if the entry is undefined before passing it to `render()`\"\n};\nconst GetEntryDeprecationError = {\n  name: \"GetEntryDeprecationError\",\n  title: \"Invalid use of `getDataEntryById` or `getEntryBySlug` function.\",\n  message: (collection, method) => `The \\`${method}\\` function is deprecated and cannot be used to query the \"${collection}\" collection. Use \\`getEntry\\` instead.`,\n  hint: \"Use the `getEntry` or `getCollection` functions to query content layer collections.\"\n};\nconst InvalidContentEntryFrontmatterError = {\n  name: \"InvalidContentEntryFrontmatterError\",\n  title: \"Content entry frontmatter does not match schema.\",\n  message(collection, entryId, error) {\n    return [\n      `**${String(collection)} \\u2192 ${String(\n        entryId\n      )}** frontmatter does not match collection schema.`,\n      ...error.errors.map((zodError) => zodError.message)\n    ].join(\"\\n\");\n  },\n  hint: \"See https://docs.astro.build/en/guides/content-collections/ for more information on content schemas.\"\n};\nconst InvalidContentEntryDataError = {\n  name: \"InvalidContentEntryDataError\",\n  title: \"Content entry data does not match schema.\",\n  message(collection, entryId, error) {\n    return [\n      `**${String(collection)} \\u2192 ${String(entryId)}** data does not match collection schema.`,\n      ...error.errors.map((zodError) => zodError.message)\n    ].join(\"\\n\");\n  },\n  hint: \"See https://docs.astro.build/en/guides/content-collections/ for more information on content schemas.\"\n};\nconst ContentLoaderReturnsInvalidId = {\n  name: \"ContentLoaderReturnsInvalidId\",\n  title: \"Content loader returned an entry with an invalid `id`.\",\n  message(collection, entry) {\n    return [\n      `The content loader for the collection **${String(collection)}** returned an entry with an invalid \\`id\\`:`,\n      JSON.stringify(entry, null, 2)\n    ].join(\"\\n\");\n  },\n  hint: \"Make sure that the `id` of the entry is a string. See https://docs.astro.build/en/guides/content-collections/ for more information on content loaders.\"\n};\nconst ContentEntryDataError = {\n  name: \"ContentEntryDataError\",\n  title: \"Content entry data does not match schema.\",\n  message(collection, entryId, error) {\n    return [\n      `**${String(collection)} \\u2192 ${String(entryId)}** data does not match collection schema.`,\n      ...error.errors.map((zodError) => zodError.message)\n    ].join(\"\\n\");\n  },\n  hint: \"See https://docs.astro.build/en/guides/content-collections/ for more information on content schemas.\"\n};\nconst ContentLoaderInvalidDataError = {\n  name: \"ContentLoaderInvalidDataError\",\n  title: \"Content entry is missing an ID\",\n  message(collection, extra) {\n    return `**${String(collection)}** entry is missing an ID.\n${extra}`;\n  },\n  hint: \"See https://docs.astro.build/en/guides/content-collections/ for more information on content loaders.\"\n};\nconst InvalidContentEntrySlugError = {\n  name: \"InvalidContentEntrySlugError\",\n  title: \"Invalid content entry slug.\",\n  message(collection, entryId) {\n    return `${String(collection)} \\u2192 ${String(\n      entryId\n    )} has an invalid slug. \\`slug\\` must be a string.`;\n  },\n  hint: \"See https://docs.astro.build/en/guides/content-collections/ for more on the `slug` field.\"\n};\nconst ContentSchemaContainsSlugError = {\n  name: \"ContentSchemaContainsSlugError\",\n  title: \"Content Schema should not contain `slug`.\",\n  message: (collectionName) => `A content collection schema should not contain \\`slug\\` since it is reserved for slug generation. Remove this from your ${collectionName} collection schema.`,\n  hint: \"See https://docs.astro.build/en/guides/content-collections/ for more on the `slug` field.\"\n};\nconst MixedContentDataCollectionError = {\n  name: \"MixedContentDataCollectionError\",\n  title: \"Content and data cannot be in same collection.\",\n  message: (collectionName) => `**${collectionName}** contains a mix of content and data entries. All entries must be of the same type.`,\n  hint: \"Store data entries in a new collection separate from your content collection.\"\n};\nconst ContentCollectionTypeMismatchError = {\n  name: \"ContentCollectionTypeMismatchError\",\n  title: \"Collection contains entries of a different type.\",\n  message: (collection, expectedType, actualType) => `${collection} contains ${expectedType} entries, but is configured as a ${actualType} collection.`\n};\nconst DataCollectionEntryParseError = {\n  name: \"DataCollectionEntryParseError\",\n  title: \"Data collection entry failed to parse.\",\n  message(entryId, errorMessage) {\n    return `**${entryId}** failed to parse: ${errorMessage}`;\n  },\n  hint: \"Ensure your data entry is an object with valid JSON (for `.json` entries) or YAML (for `.yaml` entries).\"\n};\nconst DuplicateContentEntrySlugError = {\n  name: \"DuplicateContentEntrySlugError\",\n  title: \"Duplicate content entry slug.\",\n  message(collection, slug, preExisting, alsoFound) {\n    return `**${collection}** contains multiple entries with the same slug: \\`${slug}\\`. Slugs must be unique.\n\nEntries: \n- ${preExisting}\n- ${alsoFound}`;\n  }\n};\nconst UnsupportedConfigTransformError = {\n  name: \"UnsupportedConfigTransformError\",\n  title: \"Unsupported transform in content config.\",\n  message: (parseError) => `\\`transform()\\` functions in your content config must return valid JSON, or data types compatible with the devalue library (including Dates, Maps, and Sets).\nFull error: ${parseError}`,\n  hint: \"See the devalue library for all supported types: https://github.com/rich-harris/devalue\"\n};\nconst ActionsWithoutServerOutputError = {\n  name: \"ActionsWithoutServerOutputError\",\n  title: \"Actions must be used with server output.\",\n  message: \"A server is required to create callable backend functions. To deploy routes to a server, add an adapter to your Astro config and configure your route for on-demand rendering\",\n  hint: \"Add an adapter and enable on-demand rendering: https://docs.astro.build/en/guides/on-demand-rendering/\"\n};\nconst ActionsReturnedInvalidDataError = {\n  name: \"ActionsReturnedInvalidDataError\",\n  title: \"Action handler returned invalid data.\",\n  message: (error) => `Action handler returned invalid data. Handlers should return serializable data types like objects, arrays, strings, and numbers. Parse error: ${error}`,\n  hint: \"See the devalue library for all supported types: https://github.com/rich-harris/devalue\"\n};\nconst ActionNotFoundError = {\n  name: \"ActionNotFoundError\",\n  title: \"Action not found.\",\n  message: (actionName) => `The server received a request for an action named \\`${actionName}\\` but could not find a match. If you renamed an action, check that you've updated your \\`actions/index\\` file and your calling code to match.`,\n  hint: \"You can run `astro check` to detect type errors caused by mismatched action names.\"\n};\nconst ActionCalledFromServerError = {\n  name: \"ActionCalledFromServerError\",\n  title: \"Action unexpected called from the server.\",\n  message: \"Action called from a server page or endpoint without using `Astro.callAction()`. This wrapper must be used to call actions from server code.\",\n  hint: \"See the `Astro.callAction()` reference for usage examples: https://docs.astro.build/en/reference/api-reference/#callaction\"\n};\nconst UnknownError = { name: \"UnknownError\", title: \"Unknown Error.\" };\nconst SessionWithoutSupportedAdapterOutputError = {\n  name: \"SessionWithoutSupportedAdapterOutputError\",\n  title: \"Sessions cannot be used with an adapter that doesn't support server output.\",\n  message: 'Sessions require an adapter that supports server output. The adapter must set `\"server\"` in the `buildOutput` adapter feature.',\n  hint: 'Ensure your adapter supports `buildOutput: \"server\"`: https://docs.astro.build/en/reference/adapter-reference/#building-an-adapter'\n};\nconst SessionStorageInitError = {\n  name: \"SessionStorageInitError\",\n  title: \"Session storage could not be initialized.\",\n  message: (error, driver) => `Error when initializing session storage${driver ? ` with driver \\`${driver}\\`` : \"\"}. \\`${error ?? \"\"}\\``,\n  hint: \"For more information, see https://docs.astro.build/en/reference/experimental-flags/sessions/\"\n};\nconst SessionStorageSaveError = {\n  name: \"SessionStorageSaveError\",\n  title: \"Session data could not be saved.\",\n  message: (error, driver) => `Error when saving session data${driver ? ` with driver \\`${driver}\\`` : \"\"}. \\`${error ?? \"\"}\\``,\n  hint: \"For more information, see https://docs.astro.build/en/reference/experimental-flags/sessions/\"\n};\nconst SessionConfigMissingError = {\n  name: \"SessionConfigMissingError\",\n  title: \"Session storage was enabled but not configured.\",\n  message: \"The `experimental.session` flag was set to `true`, but no storage was configured. Either configure the storage manually or use an adapter that provides session storage\",\n  hint: \"See https://docs.astro.build/en/reference/experimental-flags/sessions/\"\n};\nconst SessionConfigWithoutFlagError = {\n  name: \"SessionConfigWithoutFlagError\",\n  title: \"Session flag not set\",\n  message: \"Session config was provided without enabling the `experimental.session` flag\",\n  hint: \"See https://docs.astro.build/en/reference/experimental-flags/sessions/\"\n};\nexport {\n  ActionCalledFromServerError,\n  ActionNotFoundError,\n  ActionsReturnedInvalidDataError,\n  ActionsWithoutServerOutputError,\n  AdapterSupportOutputMismatch,\n  AstroGlobNoMatch,\n  AstroGlobUsedOutside,\n  AstroResponseHeadersReassigned,\n  CSSSyntaxError,\n  CantRenderPage,\n  CantUseAstroConfigModuleError,\n  ClientAddressNotAvailable,\n  ConfigLegacyKey,\n  ConfigNotFound,\n  ContentCollectionTypeMismatchError,\n  ContentEntryDataError,\n  ContentLoaderInvalidDataError,\n  ContentLoaderReturnsInvalidId,\n  ContentSchemaContainsSlugError,\n  CouldNotTransformImage,\n  DataCollectionEntryParseError,\n  DuplicateContentEntrySlugError,\n  EndpointDidNotReturnAResponse,\n  EnvInvalidVariables,\n  ExpectedImage,\n  ExpectedImageOptions,\n  ExpectedNotESMImage,\n  FailedToFetchRemoteImageDimensions,\n  FailedToFindPageMapSSR,\n  FailedToLoadModuleSSR,\n  ForbiddenRewrite,\n  GenerateContentTypesError,\n  GetEntryDeprecationError,\n  GetStaticPathsExpectedParams,\n  GetStaticPathsInvalidRouteParam,\n  GetStaticPathsRequired,\n  ImageMissingAlt,\n  ImageNotFound,\n  IncompatibleDescriptorOptions,\n  IncorrectStrategyForI18n,\n  InvalidComponentArgs,\n  InvalidContentEntryDataError,\n  InvalidContentEntryFrontmatterError,\n  InvalidContentEntrySlugError,\n  InvalidDynamicRoute,\n  InvalidFrontmatterInjectionError,\n  InvalidGetStaticPathParam,\n  InvalidGetStaticPathsEntry,\n  InvalidGetStaticPathsReturn,\n  InvalidGlob,\n  InvalidImageService,\n  InvalidPrerenderExport,\n  LocalImageUsedWrongly,\n  LocalsNotAnObject,\n  LocalsReassigned,\n  MarkdownFrontmatterParseError,\n  MdxIntegrationMissingError,\n  MiddlewareCantBeLoaded,\n  MiddlewareNoDataOrNextCalled,\n  MiddlewareNotAResponse,\n  MissingImageDimension,\n  MissingIndexForInternationalization,\n  MissingLocale,\n  MissingMediaQueryDirective,\n  MissingMiddlewareForInternationalization,\n  MissingSharp,\n  MixedContentDataCollectionError,\n  NoAdapterInstalled,\n  NoAdapterInstalledServerIslands,\n  NoClientEntrypoint,\n  NoClientOnlyHint,\n  NoImageMetadata,\n  NoMatchingImport,\n  NoMatchingRenderer,\n  NoMatchingStaticPathFound,\n  NoPrerenderedRoutesWithDomains,\n  OnlyResponseCanBeReturned,\n  PageNumberParamNotFound,\n  PrerenderClientAddressNotAvailable,\n  PrerenderDynamicEndpointPathCollide,\n  RedirectWithNoLocation,\n  RenderUndefinedEntryError,\n  ReservedSlotName,\n  ResponseSentError,\n  RewriteWithBodyUsed,\n  RouteNotFound,\n  ServerOnlyModule,\n  SessionConfigMissingError,\n  SessionConfigWithoutFlagError,\n  SessionStorageInitError,\n  SessionStorageSaveError,\n  SessionWithoutSupportedAdapterOutputError,\n  StaticClientAddressNotAvailable,\n  UnhandledRejection,\n  UnknownCLIError,\n  UnknownCSSError,\n  UnknownCompilerError,\n  UnknownConfigError,\n  UnknownContentCollectionError,\n  UnknownError,\n  UnknownFilesystemError,\n  UnknownMarkdownError,\n  UnknownViteError,\n  UnsupportedConfigTransformError,\n  UnsupportedExternalRedirect,\n  UnsupportedImageConversion,\n  UnsupportedImageFormat,\n  i18nNoLocaleFoundInPath,\n  i18nNotEnabled\n};\n", "function positionAt(offset, text) {\n  const lineOffsets = getLineOffsets(text);\n  offset = Math.max(0, Math.min(text.length, offset));\n  let low = 0;\n  let high = lineOffsets.length;\n  if (high === 0) {\n    return {\n      line: 0,\n      column: offset\n    };\n  }\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2);\n    const lineOffset = lineOffsets[mid];\n    if (lineOffset === offset) {\n      return {\n        line: mid,\n        column: 0\n      };\n    } else if (offset > lineOffset) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  const line = low - 1;\n  return { line, column: offset - lineOffsets[line] };\n}\nfunction getLineOffsets(text) {\n  const lineOffsets = [];\n  let isLineStart = true;\n  for (let i = 0; i < text.length; i++) {\n    if (isLineStart) {\n      lineOffsets.push(i);\n      isLineStart = false;\n    }\n    const ch = text.charAt(i);\n    isLineStart = ch === \"\\r\" || ch === \"\\n\";\n    if (ch === \"\\r\" && i + 1 < text.length && text.charAt(i + 1) === \"\\n\") {\n      i++;\n    }\n  }\n  if (isLineStart && text.length > 0) {\n    lineOffsets.push(text.length);\n  }\n  return lineOffsets;\n}\nfunction isYAMLException(err) {\n  return err instanceof Error && err.name === \"YAMLException\";\n}\nfunction formatYAMLException(e) {\n  return {\n    name: e.name,\n    id: e.mark.name,\n    loc: { file: e.mark.name, line: e.mark.line + 1, column: e.mark.column },\n    message: e.reason,\n    stack: e.stack ?? \"\"\n  };\n}\nfunction createSafeError(err) {\n  if (err instanceof Error || err?.name && err.message) {\n    return err;\n  } else {\n    const error = new Error(JSON.stringify(err));\n    error.hint = `To get as much information as possible from your errors, make sure to throw Error objects instead of \\`${typeof err}\\`. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error for more information.`;\n    return error;\n  }\n}\nfunction normalizeLF(code) {\n  return code.replace(/\\r\\n|\\r(?!\\n)|\\n/g, \"\\n\");\n}\nexport {\n  createSafeError,\n  formatYAMLException,\n  isYAMLException,\n  normalizeLF,\n  positionAt\n};\n", "import { normalizeLF } from \"./utils.js\";\nfunction codeFrame(src, loc) {\n  if (!loc || loc.line === void 0 || loc.column === void 0) {\n    return \"\";\n  }\n  const lines = normalizeLF(src).split(\"\\n\").map((ln) => ln.replace(/\\t/g, \"  \"));\n  const visibleLines = [];\n  for (let n = -2; n <= 2; n++) {\n    if (lines[loc.line + n]) visibleLines.push(loc.line + n);\n  }\n  let gutterWidth = 0;\n  for (const lineNo of visibleLines) {\n    let w = `> ${lineNo}`;\n    if (w.length > gutterWidth) gutterWidth = w.length;\n  }\n  let output = \"\";\n  for (const lineNo of visibleLines) {\n    const isFocusedLine = lineNo === loc.line - 1;\n    output += isFocusedLine ? \"> \" : \"  \";\n    output += `${lineNo + 1} | ${lines[lineNo]}\n`;\n    if (isFocusedLine)\n      output += `${Array.from({ length: gutterWidth }).join(\" \")}  | ${Array.from({\n        length: loc.column\n      }).join(\" \")}^\n`;\n  }\n  return output;\n}\nexport {\n  codeFrame\n};\n", "import { codeFrame } from \"./printer.js\";\nfunction isAstroError(e) {\n  return e instanceof AstroError;\n}\nclass AstroError extends Error {\n  loc;\n  title;\n  hint;\n  frame;\n  type = \"AstroError\";\n  constructor(props, options) {\n    const { name, title, message, stack, location, hint, frame } = props;\n    super(message, options);\n    this.title = title;\n    this.name = name;\n    if (message) this.message = message;\n    this.stack = stack ? stack : this.stack;\n    this.loc = location;\n    this.hint = hint;\n    this.frame = frame;\n  }\n  setLocation(location) {\n    this.loc = location;\n  }\n  setName(name) {\n    this.name = name;\n  }\n  setMessage(message) {\n    this.message = message;\n  }\n  setHint(hint) {\n    this.hint = hint;\n  }\n  setFrame(source, location) {\n    this.frame = codeFrame(source, location);\n  }\n  static is(err) {\n    return err.type === \"AstroError\";\n  }\n}\nclass CompilerError extends AstroError {\n  type = \"CompilerError\";\n  constructor(props, options) {\n    super(props, options);\n  }\n  static is(err) {\n    return err.type === \"CompilerError\";\n  }\n}\nclass CSSError extends AstroError {\n  type = \"CSSError\";\n  static is(err) {\n    return err.type === \"CSSError\";\n  }\n}\nclass MarkdownError extends AstroError {\n  type = \"MarkdownError\";\n  static is(err) {\n    return err.type === \"MarkdownError\";\n  }\n}\nclass InternalError extends AstroError {\n  type = \"InternalError\";\n  static is(err) {\n    return err.type === \"InternalError\";\n  }\n}\nclass AggregateError extends AstroError {\n  type = \"AggregateError\";\n  errors;\n  // Despite being a collection of errors, AggregateError still needs to have a main error attached to it\n  // This is because Vite expects every thrown errors handled during HMR to be, well, Error and have a message\n  constructor(props, options) {\n    super(props, options);\n    this.errors = props.errors;\n  }\n  static is(err) {\n    return err.type === \"AggregateError\";\n  }\n}\nconst astroConfigZodErrors = /* @__PURE__ */ new WeakSet();\nfunction isAstroConfigZodError(error) {\n  return astroConfigZodErrors.has(error);\n}\nfunction trackAstroConfigZodError(error) {\n  astroConfigZodErrors.add(error);\n}\nclass AstroUserError extends Error {\n  type = \"AstroUserError\";\n  /**\n   * A message that explains to the user how they can fix the error.\n   */\n  hint;\n  name = \"AstroUserError\";\n  constructor(message, hint) {\n    super();\n    this.message = message;\n    this.hint = hint;\n  }\n  static is(err) {\n    return err.type === \"AstroUserError\";\n  }\n}\nexport {\n  AggregateError,\n  AstroError,\n  AstroUserError,\n  CSSError,\n  CompilerError,\n  InternalError,\n  MarkdownError,\n  isAstroConfigZodError,\n  isAstroError,\n  trackAstroConfigZodError\n};\n", "function appendExtension(path, extension) {\n  return path + \".\" + extension;\n}\nfunction appendForwardSlash(path) {\n  return path.endsWith(\"/\") ? path : path + \"/\";\n}\nfunction prependForwardSlash(path) {\n  return path[0] === \"/\" ? path : \"/\" + path;\n}\nfunction collapseDuplicateSlashes(path) {\n  return path.replace(/(?<!:)\\/{2,}/g, \"/\");\n}\nconst MANY_TRAILING_SLASHES = /\\/{2,}$/g;\nfunction collapseDuplicateTrailingSlashes(path, trailingSlash) {\n  if (!path) {\n    return path;\n  }\n  return path.replace(MANY_TRAILING_SLASHES, trailingSlash ? \"/\" : \"\") || \"/\";\n}\nfunction removeTrailingForwardSlash(path) {\n  return path.endsWith(\"/\") ? path.slice(0, path.length - 1) : path;\n}\nfunction removeLeadingForwardSlash(path) {\n  return path.startsWith(\"/\") ? path.substring(1) : path;\n}\nfunction removeLeadingForwardSlashWindows(path) {\n  return path.startsWith(\"/\") && path[2] === \":\" ? path.substring(1) : path;\n}\nfunction trimSlashes(path) {\n  return path.replace(/^\\/|\\/$/g, \"\");\n}\nfunction startsWithForwardSlash(path) {\n  return path[0] === \"/\";\n}\nfunction startsWithDotDotSlash(path) {\n  const c1 = path[0];\n  const c2 = path[1];\n  const c3 = path[2];\n  return c1 === \".\" && c2 === \".\" && c3 === \"/\";\n}\nfunction startsWithDotSlash(path) {\n  const c1 = path[0];\n  const c2 = path[1];\n  return c1 === \".\" && c2 === \"/\";\n}\nfunction isRelativePath(path) {\n  return startsWithDotDotSlash(path) || startsWithDotSlash(path);\n}\nfunction isString(path) {\n  return typeof path === \"string\" || path instanceof String;\n}\nfunction joinPaths(...paths) {\n  return paths.filter(isString).map((path, i) => {\n    if (i === 0) {\n      return removeTrailingForwardSlash(path);\n    } else if (i === paths.length - 1) {\n      return removeLeadingForwardSlash(path);\n    } else {\n      return trimSlashes(path);\n    }\n  }).join(\"/\");\n}\nfunction removeFileExtension(path) {\n  let idx = path.lastIndexOf(\".\");\n  return idx === -1 ? path : path.slice(0, idx);\n}\nfunction removeQueryString(path) {\n  const index = path.lastIndexOf(\"?\");\n  return index > 0 ? path.substring(0, index) : path;\n}\nfunction isRemotePath(src) {\n  return /^(?:http|ftp|https|ws):?\\/\\//.test(src) || src.startsWith(\"data:\");\n}\nfunction slash(path) {\n  return path.replace(/\\\\/g, \"/\");\n}\nfunction fileExtension(path) {\n  const ext = path.split(\".\").pop();\n  return ext !== path ? `.${ext}` : \"\";\n}\nfunction removeBase(path, base) {\n  if (path.startsWith(base)) {\n    return path.slice(removeTrailingForwardSlash(base).length);\n  }\n  return path;\n}\nconst WITH_FILE_EXT = /\\/[^/]+\\.\\w+$/;\nfunction hasFileExtension(path) {\n  return WITH_FILE_EXT.test(path);\n}\nexport {\n  MANY_TRAILING_SLASHES,\n  appendExtension,\n  appendForwardSlash,\n  collapseDuplicateSlashes,\n  collapseDuplicateTrailingSlashes,\n  fileExtension,\n  hasFileExtension,\n  isRelativePath,\n  isRemotePath,\n  joinPaths,\n  prependForwardSlash,\n  removeBase,\n  removeFileExtension,\n  removeLeadingForwardSlash,\n  removeLeadingForwardSlashWindows,\n  removeQueryString,\n  removeTrailingForwardSlash,\n  slash,\n  startsWithDotDotSlash,\n  startsWithDotSlash,\n  startsWithForwardSlash,\n  trimSlashes\n};\n", "function getTimeStat(timeStart, timeEnd) {\n  const buildTime = timeEnd - timeStart;\n  return buildTime < 1e3 ? `${Math.round(buildTime)}ms` : `${(buildTime / 1e3).toFixed(2)}s`;\n}\nfunction shouldAppendForwardSlash(trailingSlash, buildFormat) {\n  switch (trailingSlash) {\n    case \"always\":\n      return true;\n    case \"never\":\n      return false;\n    case \"ignore\": {\n      switch (buildFormat) {\n        case \"directory\":\n          return true;\n        case \"preserve\":\n        case \"file\":\n          return false;\n      }\n    }\n  }\n}\nfunction i18nHasFallback(config) {\n  if (config.i18n && config.i18n.fallback) {\n    return Object.keys(config.i18n.fallback).length > 0;\n  }\n  return false;\n}\nfunction encodeName(name) {\n  for (let i = 0; i < name.length; i++) {\n    if (name[i] === \"%\") {\n      const third = name.codePointAt(i + 2) | 32;\n      if (name[i + 1] !== \"2\" || third !== 102) {\n        return `${name.replace(/%/g, \"_percent_\")}`;\n      }\n    }\n  }\n  return name;\n}\nfunction viteBuildReturnToRollupOutputs(viteBuildReturn) {\n  const result = [];\n  if (Array.isArray(viteBuildReturn)) {\n    result.push(...viteBuildReturn);\n  } else if (\"output\" in viteBuildReturn) {\n    result.push(viteBuildReturn);\n  }\n  return result;\n}\nexport {\n  encodeName,\n  getTimeStat,\n  i18nHasFallback,\n  shouldAppendForwardSlash,\n  viteBuildReturnToRollupOutputs\n};\n", "const ASTRO_VERSION = \"5.4.1\";\nconst REROUTE_DIRECTIVE_HEADER = \"X-Astro-Reroute\";\nconst REWRITE_DIRECTIVE_HEADER_KEY = \"X-Astro-Rewrite\";\nconst REWRITE_DIRECTIVE_HEADER_VALUE = \"yes\";\nconst NOOP_MIDDLEWARE_HEADER = \"X-Astro-Noop\";\nconst ROUTE_TYPE_HEADER = \"X-Astro-Route-Type\";\nconst DEFAULT_404_COMPONENT = \"astro-default-404.astro\";\nconst DEFAULT_500_COMPONENT = \"astro-default-500.astro\";\nconst REDIRECT_STATUS_CODES = [301, 302, 303, 307, 308, 300, 304];\nconst REROUTABLE_STATUS_CODES = [404, 500];\nconst clientAddressSymbol = Symbol.for(\"astro.clientAddress\");\nconst clientLocalsSymbol = Symbol.for(\"astro.locals\");\nconst originPathnameSymbol = Symbol.for(\"astro.originPathname\");\nconst responseSentSymbol = Symbol.for(\"astro.responseSent\");\nconst SUPPORTED_MARKDOWN_FILE_EXTENSIONS = [\n  \".markdown\",\n  \".mdown\",\n  \".mkdn\",\n  \".mkd\",\n  \".mdwn\",\n  \".md\"\n];\nconst MIDDLEWARE_PATH_SEGMENT_NAME = \"middleware\";\nexport {\n  ASTRO_VERSION,\n  DEFAULT_404_COMPONENT,\n  DEFAULT_500_COMPONENT,\n  MIDDLEWARE_PATH_SEGMENT_NAME,\n  NOOP_MIDDLEWARE_HEADER,\n  REDIRECT_STATUS_CODES,\n  REROUTABLE_STATUS_CODES,\n  REROUTE_DIRECTIVE_HEADER,\n  REWRITE_DIRECTIVE_HEADER_KEY,\n  REWRITE_DIRECTIVE_HEADER_VALUE,\n  ROUTE_TYPE_HEADER,\n  SUPPORTED_MARKDOWN_FILE_EXTENSIONS,\n  clientAddressSymbol,\n  clientLocalsSymbol,\n  originPathnameSymbol,\n  responseSentSymbol\n};\n", "let FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM, isTTY=true;\nif (typeof process !== 'undefined') {\n\t({ FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM } = process.env || {});\n\tisTTY = process.stdout && process.stdout.isTTY;\n}\n\nexport const $ = {\n\tenabled: !NODE_DISABLE_COLORS && NO_COLOR == null && TERM !== 'dumb' && (\n\t\tFORCE_COLOR != null && FORCE_COLOR !== '0' || isTTY\n\t)\n}\n\nfunction init(x, y) {\n\tlet rgx = new RegExp(`\\\\x1b\\\\[${y}m`, 'g');\n\tlet open = `\\x1b[${x}m`, close = `\\x1b[${y}m`;\n\n\treturn function (txt) {\n\t\tif (!$.enabled || txt == null) return txt;\n\t\treturn open + (!!~(''+txt).indexOf(close) ? txt.replace(rgx, close + open) : txt) + close;\n\t};\n}\n\n// modifiers\nexport const reset = init(0, 0);\nexport const bold = init(1, 22);\nexport const dim = init(2, 22);\nexport const italic = init(3, 23);\nexport const underline = init(4, 24);\nexport const inverse = init(7, 27);\nexport const hidden = init(8, 28);\nexport const strikethrough = init(9, 29);\n\n// colors\nexport const black = init(30, 39);\nexport const red = init(31, 39);\nexport const green = init(32, 39);\nexport const yellow = init(33, 39);\nexport const blue = init(34, 39);\nexport const magenta = init(35, 39);\nexport const cyan = init(36, 39);\nexport const white = init(37, 39);\nexport const gray = init(90, 39);\nexport const grey = init(90, 39);\n\n// background colors\nexport const bgBlack = init(40, 49);\nexport const bgRed = init(41, 49);\nexport const bgGreen = init(42, 49);\nexport const bgYellow = init(43, 49);\nexport const bgBlue = init(44, 49);\nexport const bgMagenta = init(45, 49);\nexport const bgCyan = init(46, 49);\nexport const bgWhite = init(47, 49);\n", "/**\n * Copyright (C) 2017-present by Andrea Giammarchi - @WebReflection\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nconst {replace} = '';\n\n// escape\nconst es = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34);/g;\nconst ca = /[&<>'\"]/g;\n\nconst esca = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  \"'\": '&#39;',\n  '\"': '&quot;'\n};\nconst pe = m => esca[m];\n\n/**\n * Safely escape HTML entities such as `&`, `<`, `>`, `\"`, and `'`.\n * @param {string} es the input to safely escape\n * @returns {string} the escaped input, and it **throws** an error if\n *  the input type is unexpected, except for boolean and numbers,\n *  converted as string.\n */\nexport const escape = es => replace.call(es, ca, pe);\n\n\n// unescape\nconst unes = {\n  '&amp;': '&',\n  '&#38;': '&',\n  '&lt;': '<',\n  '&#60;': '<',\n  '&gt;': '>',\n  '&#62;': '>',\n  '&apos;': \"'\",\n  '&#39;': \"'\",\n  '&quot;': '\"',\n  '&#34;': '\"'\n};\nconst cape = m => unes[m];\n\n/**\n * Safely unescape previously escaped entities such as `&`, `<`, `>`, `\"`,\n * and `'`.\n * @param {string} un a previously escaped string\n * @returns {string} the unescaped input, and it **throws** an error if\n *  the input type is unexpected, except for boolean and numbers,\n *  converted as string.\n */\nexport const unescape = un => replace.call(un, es, cape);\n", "function isPromise(value) {\n  return !!value && typeof value === \"object\" && \"then\" in value && typeof value.then === \"function\";\n}\nasync function* streamAsyncIterator(stream) {\n  const reader = stream.getReader();\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) return;\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\nexport {\n  isPromise,\n  streamAsyncIterator\n};\n", "import { escape } from \"html-escaper\";\nimport { streamAsyncIterator } from \"./util.js\";\nconst escapeHTML = escape;\nclass HTMLBytes extends Uint8Array {\n}\nObject.defineProperty(HTMLBytes.prototype, Symbol.toStringTag, {\n  get() {\n    return \"HTMLBytes\";\n  }\n});\nclass HTMLString extends String {\n  get [Symbol.toStringTag]() {\n    return \"HTMLString\";\n  }\n}\nconst markHTMLString = (value) => {\n  if (value instanceof HTMLString) {\n    return value;\n  }\n  if (typeof value === \"string\") {\n    return new HTMLString(value);\n  }\n  return value;\n};\nfunction isHTMLString(value) {\n  return Object.prototype.toString.call(value) === \"[object HTMLString]\";\n}\nfunction markHTMLBytes(bytes) {\n  return new HTMLBytes(bytes);\n}\nfunction isHTMLBytes(value) {\n  return Object.prototype.toString.call(value) === \"[object HTMLBytes]\";\n}\nfunction hasGetReader(obj) {\n  return typeof obj.getReader === \"function\";\n}\nasync function* unescapeChunksAsync(iterable) {\n  if (hasGetReader(iterable)) {\n    for await (const chunk of streamAsyncIterator(iterable)) {\n      yield unescapeHTML(chunk);\n    }\n  } else {\n    for await (const chunk of iterable) {\n      yield unescapeHTML(chunk);\n    }\n  }\n}\nfunction* unescapeChunks(iterable) {\n  for (const chunk of iterable) {\n    yield unescapeHTML(chunk);\n  }\n}\nfunction unescapeHTML(str) {\n  if (!!str && typeof str === \"object\") {\n    if (str instanceof Uint8Array) {\n      return markHTMLBytes(str);\n    } else if (str instanceof Response && str.body) {\n      const body = str.body;\n      return unescapeChunksAsync(body);\n    } else if (typeof str.then === \"function\") {\n      return Promise.resolve(str).then((value) => {\n        return unescapeHTML(value);\n      });\n    } else if (str[Symbol.for(\"astro:slot-string\")]) {\n      return str;\n    } else if (Symbol.iterator in str) {\n      return unescapeChunks(str);\n    } else if (Symbol.asyncIterator in str || hasGetReader(str)) {\n      return unescapeChunksAsync(str);\n    }\n  }\n  return markHTMLString(str);\n}\nexport {\n  HTMLBytes,\n  HTMLString,\n  escapeHTML,\n  isHTMLBytes,\n  isHTMLString,\n  markHTMLString,\n  unescapeHTML\n};\n", "import { Fragment, Renderer, markHTMLString } from \"../runtime/server/index.js\";\nconst AstroJSX = \"astro:jsx\";\nconst Empty = Symbol(\"empty\");\nconst toSlotName = (slotAttr) => slotAttr;\nfunction isVNode(vnode) {\n  return vnode && typeof vnode === \"object\" && vnode[AstroJSX];\n}\nfunction transformSlots(vnode) {\n  if (typeof vnode.type === \"string\") return vnode;\n  const slots = {};\n  if (isVNode(vnode.props.children)) {\n    const child = vnode.props.children;\n    if (!isVNode(child)) return;\n    if (!(\"slot\" in child.props)) return;\n    const name = toSlotName(child.props.slot);\n    slots[name] = [child];\n    slots[name][\"$$slot\"] = true;\n    delete child.props.slot;\n    delete vnode.props.children;\n  } else if (Array.isArray(vnode.props.children)) {\n    vnode.props.children = vnode.props.children.map((child) => {\n      if (!isVNode(child)) return child;\n      if (!(\"slot\" in child.props)) return child;\n      const name = toSlotName(child.props.slot);\n      if (Array.isArray(slots[name])) {\n        slots[name].push(child);\n      } else {\n        slots[name] = [child];\n        slots[name][\"$$slot\"] = true;\n      }\n      delete child.props.slot;\n      return Empty;\n    }).filter((v) => v !== Empty);\n  }\n  Object.assign(vnode.props, slots);\n}\nfunction markRawChildren(child) {\n  if (typeof child === \"string\") return markHTMLString(child);\n  if (Array.isArray(child)) return child.map((c) => markRawChildren(c));\n  return child;\n}\nfunction transformSetDirectives(vnode) {\n  if (!(\"set:html\" in vnode.props || \"set:text\" in vnode.props)) return;\n  if (\"set:html\" in vnode.props) {\n    const children = markRawChildren(vnode.props[\"set:html\"]);\n    delete vnode.props[\"set:html\"];\n    Object.assign(vnode.props, { children });\n    return;\n  }\n  if (\"set:text\" in vnode.props) {\n    const children = vnode.props[\"set:text\"];\n    delete vnode.props[\"set:text\"];\n    Object.assign(vnode.props, { children });\n    return;\n  }\n}\nfunction createVNode(type, props) {\n  const vnode = {\n    [Renderer]: \"astro:jsx\",\n    [AstroJSX]: true,\n    type,\n    props: props ?? {}\n  };\n  transformSetDirectives(vnode);\n  transformSlots(vnode);\n  return vnode;\n}\nexport {\n  AstroJSX,\n  Fragment,\n  isVNode,\n  createVNode as jsx,\n  createVNode as jsxDEV,\n  createVNode as jsxs,\n  transformSlots\n};\n", "const RenderInstructionSymbol = Symbol.for(\"astro:render\");\nfunction createRenderInstruction(instruction) {\n  return Object.defineProperty(instruction, RenderInstructionSymbol, {\n    value: true\n  });\n}\nfunction isRenderInstruction(chunk) {\n  return chunk && typeof chunk === \"object\" && chunk[RenderInstructionSymbol];\n}\nexport {\n  createRenderInstruction,\n  isRenderInstruction\n};\n", "import { AstroError, AstroErrorData } from \"../../core/errors/index.js\";\nimport { escapeHTML } from \"./escape.js\";\nimport { serializeProps } from \"./serialize.js\";\nconst transitionDirectivesToCopyOnIsland = Object.freeze([\n  \"data-astro-transition-scope\",\n  \"data-astro-transition-persist\",\n  \"data-astro-transition-persist-props\"\n]);\nfunction extractDirectives(inputProps, clientDirectives) {\n  let extracted = {\n    isPage: false,\n    hydration: null,\n    props: {},\n    propsWithoutTransitionAttributes: {}\n  };\n  for (const [key, value] of Object.entries(inputProps)) {\n    if (key.startsWith(\"server:\")) {\n      if (key === \"server:root\") {\n        extracted.isPage = true;\n      }\n    }\n    if (key.startsWith(\"client:\")) {\n      if (!extracted.hydration) {\n        extracted.hydration = {\n          directive: \"\",\n          value: \"\",\n          componentUrl: \"\",\n          componentExport: { value: \"\" }\n        };\n      }\n      switch (key) {\n        case \"client:component-path\": {\n          extracted.hydration.componentUrl = value;\n          break;\n        }\n        case \"client:component-export\": {\n          extracted.hydration.componentExport.value = value;\n          break;\n        }\n        // This is a special prop added to prove that the client hydration method\n        // was added statically.\n        case \"client:component-hydration\": {\n          break;\n        }\n        case \"client:display-name\": {\n          break;\n        }\n        default: {\n          extracted.hydration.directive = key.split(\":\")[1];\n          extracted.hydration.value = value;\n          if (!clientDirectives.has(extracted.hydration.directive)) {\n            const hydrationMethods = Array.from(clientDirectives.keys()).map((d) => `client:${d}`).join(\", \");\n            throw new Error(\n              `Error: invalid hydration directive \"${key}\". Supported hydration methods: ${hydrationMethods}`\n            );\n          }\n          if (extracted.hydration.directive === \"media\" && typeof extracted.hydration.value !== \"string\") {\n            throw new AstroError(AstroErrorData.MissingMediaQueryDirective);\n          }\n          break;\n        }\n      }\n    } else {\n      extracted.props[key] = value;\n      if (!transitionDirectivesToCopyOnIsland.includes(key)) {\n        extracted.propsWithoutTransitionAttributes[key] = value;\n      }\n    }\n  }\n  for (const sym of Object.getOwnPropertySymbols(inputProps)) {\n    extracted.props[sym] = inputProps[sym];\n    extracted.propsWithoutTransitionAttributes[sym] = inputProps[sym];\n  }\n  return extracted;\n}\nasync function generateHydrateScript(scriptOptions, metadata) {\n  const { renderer, result, astroId, props, attrs } = scriptOptions;\n  const { hydrate, componentUrl, componentExport } = metadata;\n  if (!componentExport.value) {\n    throw new AstroError({\n      ...AstroErrorData.NoMatchingImport,\n      message: AstroErrorData.NoMatchingImport.message(metadata.displayName)\n    });\n  }\n  const island = {\n    children: \"\",\n    props: {\n      // This is for HMR, probably can avoid it in prod\n      uid: astroId\n    }\n  };\n  if (attrs) {\n    for (const [key, value] of Object.entries(attrs)) {\n      island.props[key] = escapeHTML(value);\n    }\n  }\n  island.props[\"component-url\"] = await result.resolve(decodeURI(componentUrl));\n  if (renderer.clientEntrypoint) {\n    island.props[\"component-export\"] = componentExport.value;\n    island.props[\"renderer-url\"] = await result.resolve(\n      decodeURI(renderer.clientEntrypoint.toString())\n    );\n    island.props[\"props\"] = escapeHTML(serializeProps(props, metadata));\n  }\n  island.props[\"ssr\"] = \"\";\n  island.props[\"client\"] = hydrate;\n  let beforeHydrationUrl = await result.resolve(\"astro:scripts/before-hydration.js\");\n  if (beforeHydrationUrl.length) {\n    island.props[\"before-hydration-url\"] = beforeHydrationUrl;\n  }\n  island.props[\"opts\"] = escapeHTML(\n    JSON.stringify({\n      name: metadata.displayName,\n      value: metadata.hydrateArgs || \"\"\n    })\n  );\n  transitionDirectivesToCopyOnIsland.forEach((name) => {\n    if (typeof props[name] !== \"undefined\") {\n      island.props[name] = props[name];\n    }\n  });\n  return island;\n}\nexport {\n  extractDirectives,\n  generateHydrateScript\n};\n", "/**\n * shortdash - https://github.com/bibig/node-shorthash\n *\n * @license\n *\n * (The MIT License)\n *\n * Copyright (c) 2013 Bibig <bibig@me.com>\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\nconst dictionary = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY\";\nconst binary = dictionary.length;\nfunction bitwise(str) {\n  let hash = 0;\n  if (str.length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    const ch = str.charCodeAt(i);\n    hash = (hash << 5) - hash + ch;\n    hash = hash & hash;\n  }\n  return hash;\n}\nfunction shorthash(text) {\n  let num;\n  let result = \"\";\n  let integer = bitwise(text);\n  const sign = integer < 0 ? \"Z\" : \"\";\n  integer = Math.abs(integer);\n  while (integer >= binary) {\n    num = integer % binary;\n    integer = Math.floor(integer / binary);\n    result = dictionary[num] + result;\n  }\n  if (integer > 0) {\n    result = dictionary[integer] + result;\n  }\n  return sign + result;\n}\nexport {\n  shorthash\n};\n", "const headAndContentSym = Symbol.for(\"astro.headAndContent\");\nfunction isHeadAndContent(obj) {\n  return typeof obj === \"object\" && obj !== null && !!obj[headAndContentSym];\n}\nfunction createHeadAndContent(head, content) {\n  return {\n    [headAndContentSym]: true,\n    head,\n    content\n  };\n}\nexport {\n  createHeadAndContent,\n  isHeadAndContent\n};\n", "import { clsx } from \"clsx\";\nimport { HTMLString, markHTMLString } from \"../escape.js\";\nimport { isPromise } from \"../util.js\";\nconst voidElementNames = /^(area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/i;\nconst htmlBooleanAttributes = /^(?:allowfullscreen|async|autofocus|autoplay|checked|controls|default|defer|disabled|disablepictureinpicture|disableremoteplayback|formnovalidate|hidden|inert|loop|nomodule|novalidate|open|playsinline|readonly|required|reversed|scoped|seamless|selected|itemscope)$/i;\nconst AMPERSAND_REGEX = /&/g;\nconst DOUBLE_QUOTE_REGEX = /\"/g;\nconst STATIC_DIRECTIVES = /* @__PURE__ */ new Set([\"set:html\", \"set:text\"]);\nconst toIdent = (k) => k.trim().replace(/(?!^)\\b\\w|\\s+|\\W+/g, (match, index) => {\n  if (/\\W/.test(match)) return \"\";\n  return index === 0 ? match : match.toUpperCase();\n});\nconst toAttributeString = (value, shouldEscape = true) => shouldEscape ? String(value).replace(AMPERSAND_REGEX, \"&#38;\").replace(DOUBLE_QUOTE_REGEX, \"&#34;\") : value;\nconst kebab = (k) => k.toLowerCase() === k ? k : k.replace(/[A-Z]/g, (match) => `-${match.toLowerCase()}`);\nconst toStyleString = (obj) => Object.entries(obj).filter(([_, v]) => typeof v === \"string\" && v.trim() || typeof v === \"number\").map(([k, v]) => {\n  if (k[0] !== \"-\" && k[1] !== \"-\") return `${kebab(k)}:${v}`;\n  return `${k}:${v}`;\n}).join(\";\");\nfunction defineScriptVars(vars) {\n  let output = \"\";\n  for (const [key, value] of Object.entries(vars)) {\n    output += `const ${toIdent(key)} = ${JSON.stringify(value)?.replace(\n      /<\\/script>/g,\n      \"\\\\x3C/script>\"\n    )};\n`;\n  }\n  return markHTMLString(output);\n}\nfunction formatList(values) {\n  if (values.length === 1) {\n    return values[0];\n  }\n  return `${values.slice(0, -1).join(\", \")} or ${values[values.length - 1]}`;\n}\nfunction addAttribute(value, key, shouldEscape = true) {\n  if (value == null) {\n    return \"\";\n  }\n  if (STATIC_DIRECTIVES.has(key)) {\n    console.warn(`[astro] The \"${key}\" directive cannot be applied dynamically at runtime. It will not be rendered as an attribute.\n\nMake sure to use the static attribute syntax (\\`${key}={value}\\`) instead of the dynamic spread syntax (\\`{...{ \"${key}\": value }}\\`).`);\n    return \"\";\n  }\n  if (key === \"class:list\") {\n    const listValue = toAttributeString(clsx(value), shouldEscape);\n    if (listValue === \"\") {\n      return \"\";\n    }\n    return markHTMLString(` ${key.slice(0, -5)}=\"${listValue}\"`);\n  }\n  if (key === \"style\" && !(value instanceof HTMLString)) {\n    if (Array.isArray(value) && value.length === 2) {\n      return markHTMLString(\n        ` ${key}=\"${toAttributeString(`${toStyleString(value[0])};${value[1]}`, shouldEscape)}\"`\n      );\n    }\n    if (typeof value === \"object\") {\n      return markHTMLString(` ${key}=\"${toAttributeString(toStyleString(value), shouldEscape)}\"`);\n    }\n  }\n  if (key === \"className\") {\n    return markHTMLString(` class=\"${toAttributeString(value, shouldEscape)}\"`);\n  }\n  if (typeof value === \"string\" && value.includes(\"&\") && isHttpUrl(value)) {\n    return markHTMLString(` ${key}=\"${toAttributeString(value, false)}\"`);\n  }\n  if (htmlBooleanAttributes.test(key)) {\n    return markHTMLString(value ? ` ${key}` : \"\");\n  }\n  if (value === \"\") {\n    return markHTMLString(` ${key}`);\n  }\n  return markHTMLString(` ${key}=\"${toAttributeString(value, shouldEscape)}\"`);\n}\nfunction internalSpreadAttributes(values, shouldEscape = true) {\n  let output = \"\";\n  for (const [key, value] of Object.entries(values)) {\n    output += addAttribute(value, key, shouldEscape);\n  }\n  return markHTMLString(output);\n}\nfunction renderElement(name, { props: _props, children = \"\" }, shouldEscape = true) {\n  const { lang: _, \"data-astro-id\": astroId, \"define:vars\": defineVars, ...props } = _props;\n  if (defineVars) {\n    if (name === \"style\") {\n      delete props[\"is:global\"];\n      delete props[\"is:scoped\"];\n    }\n    if (name === \"script\") {\n      delete props.hoist;\n      children = defineScriptVars(defineVars) + \"\\n\" + children;\n    }\n  }\n  if ((children == null || children == \"\") && voidElementNames.test(name)) {\n    return `<${name}${internalSpreadAttributes(props, shouldEscape)}>`;\n  }\n  return `<${name}${internalSpreadAttributes(props, shouldEscape)}>${children}</${name}>`;\n}\nconst noop = () => {\n};\nclass BufferedRenderer {\n  chunks = [];\n  renderPromise;\n  destination;\n  /**\n   * Determines whether buffer has been flushed\n   * to the final destination.\n   */\n  flushed = false;\n  constructor(destination, renderFunction) {\n    this.destination = destination;\n    this.renderPromise = renderFunction(this);\n    if (isPromise(this.renderPromise)) {\n      Promise.resolve(this.renderPromise).catch(noop);\n    }\n  }\n  write(chunk) {\n    if (this.flushed) {\n      this.destination.write(chunk);\n    } else {\n      this.chunks.push(chunk);\n    }\n  }\n  flush() {\n    if (this.flushed) {\n      throw new Error(\"The render buffer has already been flushed.\");\n    }\n    this.flushed = true;\n    for (const chunk of this.chunks) {\n      this.destination.write(chunk);\n    }\n    return this.renderPromise;\n  }\n}\nfunction createBufferedRenderer(destination, renderFunction) {\n  return new BufferedRenderer(destination, renderFunction);\n}\nconst isNode = typeof process !== \"undefined\" && Object.prototype.toString.call(process) === \"[object process]\";\nconst isDeno = typeof Deno !== \"undefined\";\nfunction promiseWithResolvers() {\n  let resolve, reject;\n  const promise = new Promise((_resolve, _reject) => {\n    resolve = _resolve;\n    reject = _reject;\n  });\n  return {\n    promise,\n    resolve,\n    reject\n  };\n}\nconst VALID_PROTOCOLS = [\"http:\", \"https:\"];\nfunction isHttpUrl(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return VALID_PROTOCOLS.includes(parsedUrl.protocol);\n  } catch {\n    return false;\n  }\n}\nexport {\n  addAttribute,\n  createBufferedRenderer,\n  defineScriptVars,\n  formatList,\n  internalSpreadAttributes,\n  isDeno,\n  isNode,\n  promiseWithResolvers,\n  renderElement,\n  toAttributeString,\n  toStyleString,\n  voidElementNames\n};\n", "import { markHTMLString } from \"../../escape.js\";\nimport { isPromise } from \"../../util.js\";\nimport { renderChild } from \"../any.js\";\nimport { createBufferedRenderer } from \"../util.js\";\nconst renderTemplateResultSym = Symbol.for(\"astro.renderTemplateResult\");\nclass RenderTemplateResult {\n  [renderTemplateResultSym] = true;\n  htmlParts;\n  expressions;\n  error;\n  constructor(htmlParts, expressions) {\n    this.htmlParts = htmlParts;\n    this.error = void 0;\n    this.expressions = expressions.map((expression) => {\n      if (isPromise(expression)) {\n        return Promise.resolve(expression).catch((err) => {\n          if (!this.error) {\n            this.error = err;\n            throw err;\n          }\n        });\n      }\n      return expression;\n    });\n  }\n  render(destination) {\n    const flushers = this.expressions.map((exp) => {\n      return createBufferedRenderer(destination, (bufferDestination) => {\n        if (exp || exp === 0) {\n          return renderChild(bufferDestination, exp);\n        }\n      });\n    });\n    let i = 0;\n    const iterate = () => {\n      while (i < this.htmlParts.length) {\n        const html = this.htmlParts[i];\n        const flusher = flushers[i];\n        i++;\n        if (html) {\n          destination.write(markHTMLString(html));\n        }\n        if (flusher) {\n          const result = flusher.flush();\n          if (isPromise(result)) {\n            return result.then(iterate);\n          }\n        }\n      }\n    };\n    return iterate();\n  }\n}\nfunction isRenderTemplateResult(obj) {\n  return typeof obj === \"object\" && obj !== null && !!obj[renderTemplateResultSym];\n}\nfunction renderTemplate(htmlParts, ...expressions) {\n  return new RenderTemplateResult(htmlParts, expressions);\n}\nexport {\n  RenderTemplateResult,\n  isRenderTemplateResult,\n  renderTemplate\n};\n", "import { renderTemplate } from \"./astro/render-template.js\";\nimport { HTMLString, markHTMLString, unescapeHTML } from \"../escape.js\";\nimport { renderChild } from \"./any.js\";\nimport { chunkToString } from \"./common.js\";\nconst slotString = Symbol.for(\"astro:slot-string\");\nclass SlotString extends HTMLString {\n  instructions;\n  [slotString];\n  constructor(content, instructions) {\n    super(content);\n    this.instructions = instructions;\n    this[slotString] = true;\n  }\n}\nfunction isSlotString(str) {\n  return !!str[slotString];\n}\nfunction renderSlot(result, slotted, fallback) {\n  if (!slotted && fallback) {\n    return renderSlot(result, fallback);\n  }\n  return {\n    async render(destination) {\n      await renderChild(destination, typeof slotted === \"function\" ? slotted(result) : slotted);\n    }\n  };\n}\nasync function renderSlotToString(result, slotted, fallback) {\n  let content = \"\";\n  let instructions = null;\n  const temporaryDestination = {\n    write(chunk) {\n      if (chunk instanceof SlotString) {\n        content += chunk;\n        if (chunk.instructions) {\n          instructions ??= [];\n          instructions.push(...chunk.instructions);\n        }\n      } else if (chunk instanceof Response) return;\n      else if (typeof chunk === \"object\" && \"type\" in chunk && typeof chunk.type === \"string\") {\n        if (instructions === null) {\n          instructions = [];\n        }\n        instructions.push(chunk);\n      } else {\n        content += chunkToString(result, chunk);\n      }\n    }\n  };\n  const renderInstance = renderSlot(result, slotted, fallback);\n  await renderInstance.render(temporaryDestination);\n  return markHTMLString(new SlotString(content, instructions));\n}\nasync function renderSlots(result, slots = {}) {\n  let slotInstructions = null;\n  let children = {};\n  if (slots) {\n    await Promise.all(\n      Object.entries(slots).map(\n        ([key, value]) => renderSlotToString(result, value).then((output) => {\n          if (output.instructions) {\n            if (slotInstructions === null) {\n              slotInstructions = [];\n            }\n            slotInstructions.push(...output.instructions);\n          }\n          children[key] = output;\n        })\n      )\n    );\n  }\n  return { slotInstructions, children };\n}\nfunction createSlotValueFromString(content) {\n  return function() {\n    return renderTemplate`${unescapeHTML(content)}`;\n  };\n}\nexport {\n  SlotString,\n  createSlotValueFromString,\n  isSlotString,\n  renderSlot,\n  renderSlotToString,\n  renderSlots\n};\n", "import { markHTMLString } from \"../escape.js\";\nimport {\n  determineIfNeedsHydrationScript,\n  determinesIfNeedsDirectiveScript,\n  getPrescripts\n} from \"../scripts.js\";\nimport { renderAllHeadContent } from \"./head.js\";\nimport { isRenderInstruction } from \"./instruction.js\";\nimport { isSlotString } from \"./slot.js\";\nconst Fragment = Symbol.for(\"astro:fragment\");\nconst Renderer = Symbol.for(\"astro:renderer\");\nconst encoder = new TextEncoder();\nconst decoder = new TextDecoder();\nfunction stringifyChunk(result, chunk) {\n  if (isRenderInstruction(chunk)) {\n    const instruction = chunk;\n    switch (instruction.type) {\n      case \"directive\": {\n        const { hydration } = instruction;\n        let needsHydrationScript = hydration && determineIfNeedsHydrationScript(result);\n        let needsDirectiveScript = hydration && determinesIfNeedsDirectiveScript(result, hydration.directive);\n        let prescriptType = needsHydrationScript ? \"both\" : needsDirectiveScript ? \"directive\" : null;\n        if (prescriptType) {\n          let prescripts = getPrescripts(result, prescriptType, hydration.directive);\n          return markHTMLString(prescripts);\n        } else {\n          return \"\";\n        }\n      }\n      case \"head\": {\n        if (result._metadata.hasRenderedHead || result.partial) {\n          return \"\";\n        }\n        return renderAllHeadContent(result);\n      }\n      case \"maybe-head\": {\n        if (result._metadata.hasRenderedHead || result._metadata.headInTree || result.partial) {\n          return \"\";\n        }\n        return renderAllHeadContent(result);\n      }\n      case \"renderer-hydration-script\": {\n        const { rendererSpecificHydrationScripts } = result._metadata;\n        const { rendererName } = instruction;\n        if (!rendererSpecificHydrationScripts.has(rendererName)) {\n          rendererSpecificHydrationScripts.add(rendererName);\n          return instruction.render();\n        }\n        return \"\";\n      }\n      default: {\n        throw new Error(`Unknown chunk type: ${chunk.type}`);\n      }\n    }\n  } else if (chunk instanceof Response) {\n    return \"\";\n  } else if (isSlotString(chunk)) {\n    let out = \"\";\n    const c = chunk;\n    if (c.instructions) {\n      for (const instr of c.instructions) {\n        out += stringifyChunk(result, instr);\n      }\n    }\n    out += chunk.toString();\n    return out;\n  }\n  return chunk.toString();\n}\nfunction chunkToString(result, chunk) {\n  if (ArrayBuffer.isView(chunk)) {\n    return decoder.decode(chunk);\n  } else {\n    return stringifyChunk(result, chunk);\n  }\n}\nfunction chunkToByteArray(result, chunk) {\n  if (ArrayBuffer.isView(chunk)) {\n    return chunk;\n  } else {\n    const stringified = stringifyChunk(result, chunk);\n    return encoder.encode(stringified.toString());\n  }\n}\nfunction isRenderInstance(obj) {\n  return !!obj && typeof obj === \"object\" && \"render\" in obj && typeof obj.render === \"function\";\n}\nexport {\n  Fragment,\n  Renderer,\n  chunkToByteArray,\n  chunkToString,\n  decoder,\n  encoder,\n  isRenderInstance\n};\n", "import { escapeHTML, isHTMLString, markHTMLString } from \"../escape.js\";\nimport { isPromise } from \"../util.js\";\nimport { isAstroComponentInstance, isRenderTemplateResult } from \"./astro/index.js\";\nimport { isRenderInstance } from \"./common.js\";\nimport { SlotString } from \"./slot.js\";\nimport { createBufferedRenderer } from \"./util.js\";\nfunction renderChild(destination, child) {\n  if (isPromise(child)) {\n    return child.then((x) => renderChild(destination, x));\n  }\n  if (child instanceof SlotString) {\n    destination.write(child);\n    return;\n  }\n  if (isHTMLString(child)) {\n    destination.write(child);\n    return;\n  }\n  if (Array.isArray(child)) {\n    return renderArray(destination, child);\n  }\n  if (typeof child === \"function\") {\n    return renderChild(destination, child());\n  }\n  if (!child && child !== 0) {\n    return;\n  }\n  if (typeof child === \"string\") {\n    destination.write(markHTMLString(escapeHTML(child)));\n    return;\n  }\n  if (isRenderInstance(child)) {\n    return child.render(destination);\n  }\n  if (isRenderTemplateResult(child)) {\n    return child.render(destination);\n  }\n  if (isAstroComponentInstance(child)) {\n    return child.render(destination);\n  }\n  if (ArrayBuffer.isView(child)) {\n    destination.write(child);\n    return;\n  }\n  if (typeof child === \"object\" && (Symbol.asyncIterator in child || Symbol.iterator in child)) {\n    if (Symbol.asyncIterator in child) {\n      return renderAsyncIterable(destination, child);\n    }\n    return renderIterable(destination, child);\n  }\n  destination.write(child);\n}\nfunction renderArray(destination, children) {\n  const flushers = children.map((c) => {\n    return createBufferedRenderer(destination, (bufferDestination) => {\n      return renderChild(bufferDestination, c);\n    });\n  });\n  const iterator = flushers[Symbol.iterator]();\n  const iterate = () => {\n    for (; ; ) {\n      const { value: flusher, done } = iterator.next();\n      if (done) {\n        break;\n      }\n      const result = flusher.flush();\n      if (isPromise(result)) {\n        return result.then(iterate);\n      }\n    }\n  };\n  return iterate();\n}\nfunction renderIterable(destination, children) {\n  const iterator = children[Symbol.iterator]();\n  const iterate = () => {\n    for (; ; ) {\n      const { value, done } = iterator.next();\n      if (done) {\n        break;\n      }\n      const result = renderChild(destination, value);\n      if (isPromise(result)) {\n        return result.then(iterate);\n      }\n    }\n  };\n  return iterate();\n}\nasync function renderAsyncIterable(destination, children) {\n  for await (const value of children) {\n    await renderChild(destination, value);\n  }\n}\nexport {\n  renderChild\n};\n", "import { isPromise } from \"../../util.js\";\nimport { renderChild } from \"../any.js\";\nimport { isAPropagatingComponent } from \"./factory.js\";\nimport { isHeadAndContent } from \"./head-and-content.js\";\nconst astroComponentInstanceSym = Symbol.for(\"astro.componentInstance\");\nclass AstroComponentInstance {\n  [astroComponentInstanceSym] = true;\n  result;\n  props;\n  slotValues;\n  factory;\n  returnValue;\n  constructor(result, props, slots, factory) {\n    this.result = result;\n    this.props = props;\n    this.factory = factory;\n    this.slotValues = {};\n    for (const name in slots) {\n      let didRender = false;\n      let value = slots[name](result);\n      this.slotValues[name] = () => {\n        if (!didRender) {\n          didRender = true;\n          return value;\n        }\n        return slots[name](result);\n      };\n    }\n  }\n  init(result) {\n    if (this.returnValue !== void 0) {\n      return this.returnValue;\n    }\n    this.returnValue = this.factory(result, this.props, this.slotValues);\n    if (isPromise(this.returnValue)) {\n      this.returnValue.then((resolved) => {\n        this.returnValue = resolved;\n      }).catch(() => {\n      });\n    }\n    return this.returnValue;\n  }\n  render(destination) {\n    const returnValue = this.init(this.result);\n    if (isPromise(returnValue)) {\n      return returnValue.then((x) => this.renderImpl(destination, x));\n    }\n    return this.renderImpl(destination, returnValue);\n  }\n  renderImpl(destination, returnValue) {\n    if (isHeadAndContent(returnValue)) {\n      return returnValue.content.render(destination);\n    } else {\n      return renderChild(destination, returnValue);\n    }\n  }\n}\nfunction validateComponentProps(props, displayName) {\n  if (props != null) {\n    for (const prop of Object.keys(props)) {\n      if (prop.startsWith(\"client:\")) {\n        console.warn(\n          `You are attempting to render <${displayName} ${prop} />, but ${displayName} is an Astro component. Astro components do not render in the client and should not have a hydration directive. Please use a framework component for client rendering.`\n        );\n      }\n    }\n  }\n}\nfunction createAstroComponentInstance(result, displayName, factory, props, slots = {}) {\n  validateComponentProps(props, displayName);\n  const instance = new AstroComponentInstance(result, props, slots, factory);\n  if (isAPropagatingComponent(result, factory)) {\n    result._metadata.propagators.add(instance);\n  }\n  return instance;\n}\nfunction isAstroComponentInstance(obj) {\n  return typeof obj === \"object\" && obj !== null && !!obj[astroComponentInstanceSym];\n}\nexport {\n  AstroComponentInstance,\n  createAstroComponentInstance,\n  isAstroComponentInstance\n};\n", "export function encodeBase32UpperCase(bytes) {\n    return encodeBase32_internal(bytes, base32UpperCaseAlphabet, EncodingPadding.Include);\n}\nexport function encodeBase32UpperCaseNoPadding(bytes) {\n    return encodeBase32_internal(bytes, base32UpperCaseAlphabet, EncodingPadding.None);\n}\nexport function encodeBase32LowerCase(bytes) {\n    return encodeBase32_internal(bytes, base32LowerCaseAlphabet, EncodingPadding.Include);\n}\nexport function encodeBase32LowerCaseNoPadding(bytes) {\n    return encodeBase32_internal(bytes, base32LowerCaseAlphabet, EncodingPadding.None);\n}\n/** Replaced: Use encodeBase32UpperCase() instead. */\nexport function encodeBase32(bytes) {\n    return encodeBase32UpperCase(bytes);\n}\n/** Replaced: Use encodeBase32UpperCaseNoPadding() instead. */\nexport function encodeBase32NoPadding(bytes) {\n    return encodeBase32UpperCaseNoPadding(bytes);\n}\nfunction encodeBase32_internal(bytes, alphabet, padding) {\n    let result = \"\";\n    for (let i = 0; i < bytes.byteLength; i += 5) {\n        let buffer = 0n;\n        let bufferBitSize = 0;\n        for (let j = 0; j < 5 && i + j < bytes.byteLength; j++) {\n            buffer = (buffer << 8n) | BigInt(bytes[i + j]);\n            bufferBitSize += 8;\n        }\n        if (bufferBitSize % 5 !== 0) {\n            buffer = buffer << BigInt(5 - (bufferBitSize % 5));\n            bufferBitSize += 5 - (bufferBitSize % 5);\n        }\n        for (let j = 0; j < 8; j++) {\n            if (bufferBitSize >= 5) {\n                result += alphabet[Number((buffer >> BigInt(bufferBitSize - 5)) & 0x1fn)];\n                bufferBitSize -= 5;\n            }\n            else if (bufferBitSize > 0) {\n                result += alphabet[Number((buffer << BigInt(6 - bufferBitSize)) & 0x3fn)];\n                bufferBitSize = 0;\n            }\n            else if (padding === EncodingPadding.Include) {\n                result += \"=\";\n            }\n        }\n    }\n    return result;\n}\nexport function decodeBase32(encoded) {\n    return decodeBase32_internal(encoded, base32DecodeMap, DecodingPadding.Required);\n}\nexport function decodeBase32IgnorePadding(encoded) {\n    return decodeBase32_internal(encoded, base32DecodeMap, DecodingPadding.Ignore);\n}\nfunction decodeBase32_internal(encoded, decodeMap, padding) {\n    const result = new Uint8Array(Math.ceil(encoded.length / 8) * 5);\n    let totalBytes = 0;\n    for (let i = 0; i < encoded.length; i += 8) {\n        let chunk = 0n;\n        let bitsRead = 0;\n        for (let j = 0; j < 8; j++) {\n            if (padding === DecodingPadding.Required) {\n                if (encoded[i + j] === \"=\") {\n                    continue;\n                }\n                if (i + j >= encoded.length) {\n                    throw new Error(\"Invalid padding\");\n                }\n            }\n            if (padding === DecodingPadding.Ignore) {\n                if (i + j >= encoded.length || encoded[i + j] === \"=\") {\n                    continue;\n                }\n            }\n            if (j > 0 && encoded[i + j - 1] === \"=\") {\n                throw new Error(\"Invalid padding\");\n            }\n            if (!(encoded[i + j] in decodeMap)) {\n                throw new Error(\"Invalid character\");\n            }\n            chunk |= BigInt(decodeMap[encoded[i + j]]) << BigInt((7 - j) * 5);\n            bitsRead += 5;\n        }\n        if (bitsRead < 40) {\n            let unused;\n            if (bitsRead === 10) {\n                unused = chunk & 0xffffffffn;\n            }\n            else if (bitsRead === 20) {\n                unused = chunk & 0xffffffn;\n            }\n            else if (bitsRead === 25) {\n                unused = chunk & 0xffffn;\n            }\n            else if (bitsRead === 35) {\n                unused = chunk & 0xffn;\n            }\n            else {\n                throw new Error(\"Invalid padding\");\n            }\n            if (unused !== 0n) {\n                throw new Error(\"Invalid padding\");\n            }\n        }\n        const byteLength = Math.floor(bitsRead / 8);\n        for (let i = 0; i < byteLength; i++) {\n            result[totalBytes] = Number((chunk >> BigInt(32 - i * 8)) & 0xffn);\n            totalBytes++;\n        }\n    }\n    return result.slice(0, totalBytes);\n}\nconst base32UpperCaseAlphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\nconst base32LowerCaseAlphabet = \"abcdefghijklmnopqrstuvwxyz234567\";\nconst base32DecodeMap = {\n    A: 0,\n    B: 1,\n    C: 2,\n    D: 3,\n    E: 4,\n    F: 5,\n    G: 6,\n    H: 7,\n    I: 8,\n    J: 9,\n    K: 10,\n    L: 11,\n    M: 12,\n    N: 13,\n    O: 14,\n    P: 15,\n    Q: 16,\n    R: 17,\n    S: 18,\n    T: 19,\n    U: 20,\n    V: 21,\n    W: 22,\n    X: 23,\n    Y: 24,\n    Z: 25,\n    a: 0,\n    b: 1,\n    c: 2,\n    d: 3,\n    e: 4,\n    f: 5,\n    g: 6,\n    h: 7,\n    i: 8,\n    j: 9,\n    k: 10,\n    l: 11,\n    m: 12,\n    n: 13,\n    o: 14,\n    p: 15,\n    q: 16,\n    r: 17,\n    s: 18,\n    t: 19,\n    u: 20,\n    v: 21,\n    w: 22,\n    x: 23,\n    y: 24,\n    z: 25,\n    \"2\": 26,\n    \"3\": 27,\n    \"4\": 28,\n    \"5\": 29,\n    \"6\": 30,\n    \"7\": 31\n};\nvar EncodingPadding;\n(function (EncodingPadding) {\n    EncodingPadding[EncodingPadding[\"Include\"] = 0] = \"Include\";\n    EncodingPadding[EncodingPadding[\"None\"] = 1] = \"None\";\n})(EncodingPadding || (EncodingPadding = {}));\nvar DecodingPadding;\n(function (DecodingPadding) {\n    DecodingPadding[DecodingPadding[\"Required\"] = 0] = \"Required\";\n    DecodingPadding[DecodingPadding[\"Ignore\"] = 1] = \"Ignore\";\n})(DecodingPadding || (DecodingPadding = {}));\n", "export function encodeBase64(bytes) {\n    return encodeBase64_internal(bytes, base64Alphabet, EncodingPadding.Include);\n}\nexport function encodeBase64NoPadding(bytes) {\n    return encodeBase64_internal(bytes, base64Alphabet, EncodingPadding.None);\n}\nexport function encodeBase64url(bytes) {\n    return encodeBase64_internal(bytes, base64urlAlphabet, EncodingPadding.Include);\n}\nexport function encodeBase64urlNoPadding(bytes) {\n    return encodeBase64_internal(bytes, base64urlAlphabet, EncodingPadding.None);\n}\nfunction encodeBase64_internal(bytes, alphabet, padding) {\n    let result = \"\";\n    for (let i = 0; i < bytes.byteLength; i += 3) {\n        let buffer = 0;\n        let bufferBitSize = 0;\n        for (let j = 0; j < 3 && i + j < bytes.byteLength; j++) {\n            buffer = (buffer << 8) | bytes[i + j];\n            bufferBitSize += 8;\n        }\n        for (let j = 0; j < 4; j++) {\n            if (bufferBitSize >= 6) {\n                result += alphabet[(buffer >> (bufferBitSize - 6)) & 0x3f];\n                bufferBitSize -= 6;\n            }\n            else if (bufferBitSize > 0) {\n                result += alphabet[(buffer << (6 - bufferBitSize)) & 0x3f];\n                bufferBitSize = 0;\n            }\n            else if (padding === EncodingPadding.Include) {\n                result += \"=\";\n            }\n        }\n    }\n    return result;\n}\nconst base64Alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nconst base64urlAlphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\nexport function decodeBase64(encoded) {\n    return decodeBase64_internal(encoded, base64DecodeMap, DecodingPadding.Required);\n}\nexport function decodeBase64IgnorePadding(encoded) {\n    return decodeBase64_internal(encoded, base64DecodeMap, DecodingPadding.Ignore);\n}\nexport function decodeBase64url(encoded) {\n    return decodeBase64_internal(encoded, base64urlDecodeMap, DecodingPadding.Required);\n}\nexport function decodeBase64urlIgnorePadding(encoded) {\n    return decodeBase64_internal(encoded, base64urlDecodeMap, DecodingPadding.Ignore);\n}\nfunction decodeBase64_internal(encoded, decodeMap, padding) {\n    const result = new Uint8Array(Math.ceil(encoded.length / 4) * 3);\n    let totalBytes = 0;\n    for (let i = 0; i < encoded.length; i += 4) {\n        let chunk = 0;\n        let bitsRead = 0;\n        for (let j = 0; j < 4; j++) {\n            if (padding === DecodingPadding.Required && encoded[i + j] === \"=\") {\n                continue;\n            }\n            if (padding === DecodingPadding.Ignore &&\n                (i + j >= encoded.length || encoded[i + j] === \"=\")) {\n                continue;\n            }\n            if (j > 0 && encoded[i + j - 1] === \"=\") {\n                throw new Error(\"Invalid padding\");\n            }\n            if (!(encoded[i + j] in decodeMap)) {\n                throw new Error(\"Invalid character\");\n            }\n            chunk |= decodeMap[encoded[i + j]] << ((3 - j) * 6);\n            bitsRead += 6;\n        }\n        if (bitsRead < 24) {\n            let unused;\n            if (bitsRead === 12) {\n                unused = chunk & 0xffff;\n            }\n            else if (bitsRead === 18) {\n                unused = chunk & 0xff;\n            }\n            else {\n                throw new Error(\"Invalid padding\");\n            }\n            if (unused !== 0) {\n                throw new Error(\"Invalid padding\");\n            }\n        }\n        const byteLength = Math.floor(bitsRead / 8);\n        for (let i = 0; i < byteLength; i++) {\n            result[totalBytes] = (chunk >> (16 - i * 8)) & 0xff;\n            totalBytes++;\n        }\n    }\n    return result.slice(0, totalBytes);\n}\nvar EncodingPadding;\n(function (EncodingPadding) {\n    EncodingPadding[EncodingPadding[\"Include\"] = 0] = \"Include\";\n    EncodingPadding[EncodingPadding[\"None\"] = 1] = \"None\";\n})(EncodingPadding || (EncodingPadding = {}));\nvar DecodingPadding;\n(function (DecodingPadding) {\n    DecodingPadding[DecodingPadding[\"Required\"] = 0] = \"Required\";\n    DecodingPadding[DecodingPadding[\"Ignore\"] = 1] = \"Ignore\";\n})(DecodingPadding || (DecodingPadding = {}));\nconst base64DecodeMap = {\n    \"0\": 52,\n    \"1\": 53,\n    \"2\": 54,\n    \"3\": 55,\n    \"4\": 56,\n    \"5\": 57,\n    \"6\": 58,\n    \"7\": 59,\n    \"8\": 60,\n    \"9\": 61,\n    A: 0,\n    B: 1,\n    C: 2,\n    D: 3,\n    E: 4,\n    F: 5,\n    G: 6,\n    H: 7,\n    I: 8,\n    J: 9,\n    K: 10,\n    L: 11,\n    M: 12,\n    N: 13,\n    O: 14,\n    P: 15,\n    Q: 16,\n    R: 17,\n    S: 18,\n    T: 19,\n    U: 20,\n    V: 21,\n    W: 22,\n    X: 23,\n    Y: 24,\n    Z: 25,\n    a: 26,\n    b: 27,\n    c: 28,\n    d: 29,\n    e: 30,\n    f: 31,\n    g: 32,\n    h: 33,\n    i: 34,\n    j: 35,\n    k: 36,\n    l: 37,\n    m: 38,\n    n: 39,\n    o: 40,\n    p: 41,\n    q: 42,\n    r: 43,\n    s: 44,\n    t: 45,\n    u: 46,\n    v: 47,\n    w: 48,\n    x: 49,\n    y: 50,\n    z: 51,\n    \"+\": 62,\n    \"/\": 63\n};\nconst base64urlDecodeMap = {\n    \"0\": 52,\n    \"1\": 53,\n    \"2\": 54,\n    \"3\": 55,\n    \"4\": 56,\n    \"5\": 57,\n    \"6\": 58,\n    \"7\": 59,\n    \"8\": 60,\n    \"9\": 61,\n    A: 0,\n    B: 1,\n    C: 2,\n    D: 3,\n    E: 4,\n    F: 5,\n    G: 6,\n    H: 7,\n    I: 8,\n    J: 9,\n    K: 10,\n    L: 11,\n    M: 12,\n    N: 13,\n    O: 14,\n    P: 15,\n    Q: 16,\n    R: 17,\n    S: 18,\n    T: 19,\n    U: 20,\n    V: 21,\n    W: 22,\n    X: 23,\n    Y: 24,\n    Z: 25,\n    a: 26,\n    b: 27,\n    c: 28,\n    d: 29,\n    e: 30,\n    f: 31,\n    g: 32,\n    h: 33,\n    i: 34,\n    j: 35,\n    k: 36,\n    l: 37,\n    m: 38,\n    n: 39,\n    o: 40,\n    p: 41,\n    q: 42,\n    r: 43,\n    s: 44,\n    t: 45,\n    u: 46,\n    v: 47,\n    w: 48,\n    x: 49,\n    y: 50,\n    z: 51,\n    \"-\": 62,\n    _: 63\n};\n", "import { decodeBase64, decodeHex, encodeBase64, encodeHexUpperCase } from \"@oslojs/encoding\";\nconst ALGORITHM = \"AES-GCM\";\nasync function createKey() {\n  const key = await crypto.subtle.generateKey(\n    {\n      name: ALGORITHM,\n      length: 256\n    },\n    true,\n    [\"encrypt\", \"decrypt\"]\n  );\n  return key;\n}\nconst ENVIRONMENT_KEY_NAME = \"ASTRO_KEY\";\nfunction getEncodedEnvironmentKey() {\n  return process.env[ENVIRONMENT_KEY_NAME] || \"\";\n}\nfunction hasEnvironmentKey() {\n  return getEncodedEnvironmentKey() !== \"\";\n}\nasync function getEnvironmentKey() {\n  if (!hasEnvironmentKey()) {\n    throw new Error(\n      `There is no environment key defined. If you see this error there is a bug in Astro.`\n    );\n  }\n  const encodedKey = getEncodedEnvironmentKey();\n  return decodeKey(encodedKey);\n}\nasync function importKey(bytes) {\n  const key = await crypto.subtle.importKey(\"raw\", bytes, ALGORITHM, true, [\"encrypt\", \"decrypt\"]);\n  return key;\n}\nasync function encodeKey(key) {\n  const exported = await crypto.subtle.exportKey(\"raw\", key);\n  const encodedKey = encodeBase64(new Uint8Array(exported));\n  return encodedKey;\n}\nasync function decodeKey(encoded) {\n  const bytes = decodeBase64(encoded);\n  return crypto.subtle.importKey(\"raw\", bytes, ALGORITHM, true, [\"encrypt\", \"decrypt\"]);\n}\nconst encoder = new TextEncoder();\nconst decoder = new TextDecoder();\nconst IV_LENGTH = 24;\nasync function encryptString(key, raw) {\n  const iv = crypto.getRandomValues(new Uint8Array(IV_LENGTH / 2));\n  const data = encoder.encode(raw);\n  const buffer = await crypto.subtle.encrypt(\n    {\n      name: ALGORITHM,\n      iv\n    },\n    key,\n    data\n  );\n  return encodeHexUpperCase(iv) + encodeBase64(new Uint8Array(buffer));\n}\nasync function decryptString(key, encoded) {\n  const iv = decodeHex(encoded.slice(0, IV_LENGTH));\n  const dataArray = decodeBase64(encoded.slice(IV_LENGTH));\n  const decryptedBuffer = await crypto.subtle.decrypt(\n    {\n      name: ALGORITHM,\n      iv\n    },\n    key,\n    dataArray\n  );\n  const decryptedString = decoder.decode(decryptedBuffer);\n  return decryptedString;\n}\nexport {\n  createKey,\n  decodeKey,\n  decryptString,\n  encodeKey,\n  encryptString,\n  getEncodedEnvironmentKey,\n  getEnvironmentKey,\n  hasEnvironmentKey,\n  importKey\n};\n", "import { createRenderInstruction } from \"./instruction.js\";\nimport { clsx } from \"clsx\";\nimport { AstroError, AstroErrorData } from \"../../../core/errors/index.js\";\nimport { markHTMLString } from \"../escape.js\";\nimport { extractDirectives, generateHydrateScript } from \"../hydration.js\";\nimport { serializeProps } from \"../serialize.js\";\nimport { shorthash } from \"../shorthash.js\";\nimport { isPromise } from \"../util.js\";\nimport { isAstroComponentFactory } from \"./astro/factory.js\";\nimport { renderTemplate } from \"./astro/index.js\";\nimport { createAstroComponentInstance } from \"./astro/instance.js\";\nimport {\n  Fragment,\n  Renderer,\n  chunkToString\n} from \"./common.js\";\nimport { componentIsHTMLElement, renderHTMLElement } from \"./dom.js\";\nimport { maybeRenderHead } from \"./head.js\";\nimport { containsServerDirective, renderServerIsland } from \"./server-islands.js\";\nimport { renderSlotToString, renderSlots } from \"./slot.js\";\nimport { formatList, internalSpreadAttributes, renderElement, voidElementNames } from \"./util.js\";\nconst needsHeadRenderingSymbol = Symbol.for(\"astro.needsHeadRendering\");\nconst rendererAliases = /* @__PURE__ */ new Map([[\"solid\", \"solid-js\"]]);\nconst clientOnlyValues = /* @__PURE__ */ new Set([\"solid-js\", \"react\", \"preact\", \"vue\", \"svelte\"]);\nfunction guessRenderers(componentUrl) {\n  const extname = componentUrl?.split(\".\").pop();\n  switch (extname) {\n    case \"svelte\":\n      return [\"@astrojs/svelte\"];\n    case \"vue\":\n      return [\"@astrojs/vue\"];\n    case \"jsx\":\n    case \"tsx\":\n      return [\"@astrojs/react\", \"@astrojs/preact\", \"@astrojs/solid-js\", \"@astrojs/vue (jsx)\"];\n    case void 0:\n    default:\n      return [\n        \"@astrojs/react\",\n        \"@astrojs/preact\",\n        \"@astrojs/solid-js\",\n        \"@astrojs/vue\",\n        \"@astrojs/svelte\"\n      ];\n  }\n}\nfunction isFragmentComponent(Component) {\n  return Component === Fragment;\n}\nfunction isHTMLComponent(Component) {\n  return Component && Component[\"astro:html\"] === true;\n}\nconst ASTRO_SLOT_EXP = /<\\/?astro-slot\\b[^>]*>/g;\nconst ASTRO_STATIC_SLOT_EXP = /<\\/?astro-static-slot\\b[^>]*>/g;\nfunction removeStaticAstroSlot(html, supportsAstroStaticSlot = true) {\n  const exp = supportsAstroStaticSlot ? ASTRO_STATIC_SLOT_EXP : ASTRO_SLOT_EXP;\n  return html.replace(exp, \"\");\n}\nasync function renderFrameworkComponent(result, displayName, Component, _props, slots = {}) {\n  if (!Component && \"client:only\" in _props === false) {\n    throw new Error(\n      `Unable to render ${displayName} because it is ${Component}!\nDid you forget to import the component or is it possible there is a typo?`\n    );\n  }\n  const { renderers, clientDirectives } = result;\n  const metadata = {\n    astroStaticSlot: true,\n    displayName\n  };\n  const { hydration, isPage, props, propsWithoutTransitionAttributes } = extractDirectives(\n    _props,\n    clientDirectives\n  );\n  let html = \"\";\n  let attrs = void 0;\n  if (hydration) {\n    metadata.hydrate = hydration.directive;\n    metadata.hydrateArgs = hydration.value;\n    metadata.componentExport = hydration.componentExport;\n    metadata.componentUrl = hydration.componentUrl;\n  }\n  const probableRendererNames = guessRenderers(metadata.componentUrl);\n  const validRenderers = renderers.filter((r) => r.name !== \"astro:jsx\");\n  const { children, slotInstructions } = await renderSlots(result, slots);\n  let renderer;\n  if (metadata.hydrate !== \"only\") {\n    let isTagged = false;\n    try {\n      isTagged = Component && Component[Renderer];\n    } catch {\n    }\n    if (isTagged) {\n      const rendererName = Component[Renderer];\n      renderer = renderers.find(({ name }) => name === rendererName);\n    }\n    if (!renderer) {\n      let error;\n      for (const r of renderers) {\n        try {\n          if (await r.ssr.check.call({ result }, Component, props, children)) {\n            renderer = r;\n            break;\n          }\n        } catch (e) {\n          error ??= e;\n        }\n      }\n      if (!renderer && error) {\n        throw error;\n      }\n    }\n    if (!renderer && typeof HTMLElement === \"function\" && componentIsHTMLElement(Component)) {\n      const output = await renderHTMLElement(\n        result,\n        Component,\n        _props,\n        slots\n      );\n      return {\n        render(destination) {\n          destination.write(output);\n        }\n      };\n    }\n  } else {\n    if (metadata.hydrateArgs) {\n      const rendererName = rendererAliases.has(metadata.hydrateArgs) ? rendererAliases.get(metadata.hydrateArgs) : metadata.hydrateArgs;\n      if (clientOnlyValues.has(rendererName)) {\n        renderer = renderers.find(\n          ({ name }) => name === `@astrojs/${rendererName}` || name === rendererName\n        );\n      }\n    }\n    if (!renderer && validRenderers.length === 1) {\n      renderer = validRenderers[0];\n    }\n    if (!renderer) {\n      const extname = metadata.componentUrl?.split(\".\").pop();\n      renderer = renderers.find(({ name }) => name === `@astrojs/${extname}` || name === extname);\n    }\n  }\n  let componentServerRenderEndTime;\n  if (!renderer) {\n    if (metadata.hydrate === \"only\") {\n      const rendererName = rendererAliases.has(metadata.hydrateArgs) ? rendererAliases.get(metadata.hydrateArgs) : metadata.hydrateArgs;\n      if (clientOnlyValues.has(rendererName)) {\n        const plural = validRenderers.length > 1;\n        throw new AstroError({\n          ...AstroErrorData.NoMatchingRenderer,\n          message: AstroErrorData.NoMatchingRenderer.message(\n            metadata.displayName,\n            metadata?.componentUrl?.split(\".\").pop(),\n            plural,\n            validRenderers.length\n          ),\n          hint: AstroErrorData.NoMatchingRenderer.hint(\n            formatList(probableRendererNames.map((r) => \"`\" + r + \"`\"))\n          )\n        });\n      } else {\n        throw new AstroError({\n          ...AstroErrorData.NoClientOnlyHint,\n          message: AstroErrorData.NoClientOnlyHint.message(metadata.displayName),\n          hint: AstroErrorData.NoClientOnlyHint.hint(\n            probableRendererNames.map((r) => r.replace(\"@astrojs/\", \"\")).join(\"|\")\n          )\n        });\n      }\n    } else if (typeof Component !== \"string\") {\n      const matchingRenderers = validRenderers.filter(\n        (r) => probableRendererNames.includes(r.name)\n      );\n      const plural = validRenderers.length > 1;\n      if (matchingRenderers.length === 0) {\n        throw new AstroError({\n          ...AstroErrorData.NoMatchingRenderer,\n          message: AstroErrorData.NoMatchingRenderer.message(\n            metadata.displayName,\n            metadata?.componentUrl?.split(\".\").pop(),\n            plural,\n            validRenderers.length\n          ),\n          hint: AstroErrorData.NoMatchingRenderer.hint(\n            formatList(probableRendererNames.map((r) => \"`\" + r + \"`\"))\n          )\n        });\n      } else if (matchingRenderers.length === 1) {\n        renderer = matchingRenderers[0];\n        ({ html, attrs } = await renderer.ssr.renderToStaticMarkup.call(\n          { result },\n          Component,\n          propsWithoutTransitionAttributes,\n          children,\n          metadata\n        ));\n      } else {\n        throw new Error(`Unable to render ${metadata.displayName}!\n\nThis component likely uses ${formatList(probableRendererNames)},\nbut Astro encountered an error during server-side rendering.\n\nPlease ensure that ${metadata.displayName}:\n1. Does not unconditionally access browser-specific globals like \\`window\\` or \\`document\\`.\n   If this is unavoidable, use the \\`client:only\\` hydration directive.\n2. Does not conditionally return \\`null\\` or \\`undefined\\` when rendered on the server.\n\nIf you're still stuck, please open an issue on GitHub or join us at https://astro.build/chat.`);\n      }\n    }\n  } else {\n    if (metadata.hydrate === \"only\") {\n      html = await renderSlotToString(result, slots?.fallback);\n    } else {\n      const componentRenderStartTime = performance.now();\n      ({ html, attrs } = await renderer.ssr.renderToStaticMarkup.call(\n        { result },\n        Component,\n        propsWithoutTransitionAttributes,\n        children,\n        metadata\n      ));\n      if (process.env.NODE_ENV === \"development\")\n        componentServerRenderEndTime = performance.now() - componentRenderStartTime;\n    }\n  }\n  if (!html && typeof Component === \"string\") {\n    const Tag = sanitizeElementName(Component);\n    const childSlots = Object.values(children).join(\"\");\n    const renderTemplateResult = renderTemplate`<${Tag}${internalSpreadAttributes(\n      props\n    )}${markHTMLString(\n      childSlots === \"\" && voidElementNames.test(Tag) ? `/>` : `>${childSlots}</${Tag}>`\n    )}`;\n    html = \"\";\n    const destination = {\n      write(chunk) {\n        if (chunk instanceof Response) return;\n        html += chunkToString(result, chunk);\n      }\n    };\n    await renderTemplateResult.render(destination);\n  }\n  if (!hydration) {\n    return {\n      render(destination) {\n        if (slotInstructions) {\n          for (const instruction of slotInstructions) {\n            destination.write(instruction);\n          }\n        }\n        if (isPage || renderer?.name === \"astro:jsx\") {\n          destination.write(html);\n        } else if (html && html.length > 0) {\n          destination.write(\n            markHTMLString(removeStaticAstroSlot(html, renderer?.ssr?.supportsAstroStaticSlot))\n          );\n        }\n      }\n    };\n  }\n  const astroId = shorthash(\n    `<!--${metadata.componentExport.value}:${metadata.componentUrl}-->\n${html}\n${serializeProps(\n      props,\n      metadata\n    )}`\n  );\n  const island = await generateHydrateScript(\n    { renderer, result, astroId, props, attrs },\n    metadata\n  );\n  if (componentServerRenderEndTime && process.env.NODE_ENV === \"development\")\n    island.props[\"server-render-time\"] = componentServerRenderEndTime;\n  let unrenderedSlots = [];\n  if (html) {\n    if (Object.keys(children).length > 0) {\n      for (const key of Object.keys(children)) {\n        let tagName = renderer?.ssr?.supportsAstroStaticSlot ? !!metadata.hydrate ? \"astro-slot\" : \"astro-static-slot\" : \"astro-slot\";\n        let expectedHTML = key === \"default\" ? `<${tagName}>` : `<${tagName} name=\"${key}\">`;\n        if (!html.includes(expectedHTML)) {\n          unrenderedSlots.push(key);\n        }\n      }\n    }\n  } else {\n    unrenderedSlots = Object.keys(children);\n  }\n  const template = unrenderedSlots.length > 0 ? unrenderedSlots.map(\n    (key) => `<template data-astro-template${key !== \"default\" ? `=\"${key}\"` : \"\"}>${children[key]}</template>`\n  ).join(\"\") : \"\";\n  island.children = `${html ?? \"\"}${template}`;\n  if (island.children) {\n    island.props[\"await-children\"] = \"\";\n    island.children += `<!--astro:end-->`;\n  }\n  return {\n    render(destination) {\n      if (slotInstructions) {\n        for (const instruction of slotInstructions) {\n          destination.write(instruction);\n        }\n      }\n      destination.write(createRenderInstruction({ type: \"directive\", hydration }));\n      if (hydration.directive !== \"only\" && renderer?.ssr.renderHydrationScript) {\n        destination.write(\n          createRenderInstruction({\n            type: \"renderer-hydration-script\",\n            rendererName: renderer.name,\n            render: renderer.ssr.renderHydrationScript\n          })\n        );\n      }\n      const renderedElement = renderElement(\"astro-island\", island, false);\n      destination.write(markHTMLString(renderedElement));\n    }\n  };\n}\nfunction sanitizeElementName(tag) {\n  const unsafe = /[&<>'\"\\s]+/;\n  if (!unsafe.test(tag)) return tag;\n  return tag.trim().split(unsafe)[0].trim();\n}\nasync function renderFragmentComponent(result, slots = {}) {\n  const children = await renderSlotToString(result, slots?.default);\n  return {\n    render(destination) {\n      if (children == null) return;\n      destination.write(children);\n    }\n  };\n}\nasync function renderHTMLComponent(result, Component, _props, slots = {}) {\n  const { slotInstructions, children } = await renderSlots(result, slots);\n  const html = Component({ slots: children });\n  const hydrationHtml = slotInstructions ? slotInstructions.map((instr) => chunkToString(result, instr)).join(\"\") : \"\";\n  return {\n    render(destination) {\n      destination.write(markHTMLString(hydrationHtml + html));\n    }\n  };\n}\nfunction renderAstroComponent(result, displayName, Component, props, slots = {}) {\n  if (containsServerDirective(props)) {\n    return renderServerIsland(result, displayName, props, slots);\n  }\n  const instance = createAstroComponentInstance(result, displayName, Component, props, slots);\n  return {\n    render(destination) {\n      return instance.render(destination);\n    }\n  };\n}\nfunction renderComponent(result, displayName, Component, props, slots = {}) {\n  if (isPromise(Component)) {\n    return Component.catch(handleCancellation).then((x) => {\n      return renderComponent(result, displayName, x, props, slots);\n    });\n  }\n  if (isFragmentComponent(Component)) {\n    return renderFragmentComponent(result, slots).catch(handleCancellation);\n  }\n  props = normalizeProps(props);\n  if (isHTMLComponent(Component)) {\n    return renderHTMLComponent(result, Component, props, slots).catch(handleCancellation);\n  }\n  if (isAstroComponentFactory(Component)) {\n    return renderAstroComponent(result, displayName, Component, props, slots);\n  }\n  return renderFrameworkComponent(result, displayName, Component, props, slots).catch(\n    handleCancellation\n  );\n  function handleCancellation(e) {\n    if (result.cancelled)\n      return {\n        render() {\n        }\n      };\n    throw e;\n  }\n}\nfunction normalizeProps(props) {\n  if (props[\"class:list\"] !== void 0) {\n    const value = props[\"class:list\"];\n    delete props[\"class:list\"];\n    props[\"class\"] = clsx(props[\"class\"], value);\n    if (props[\"class\"] === \"\") {\n      delete props[\"class\"];\n    }\n  }\n  return props;\n}\nasync function renderComponentToString(result, displayName, Component, props, slots = {}, isPage = false, route) {\n  let str = \"\";\n  let renderedFirstPageChunk = false;\n  let head = \"\";\n  if (isPage && !result.partial && nonAstroPageNeedsHeadInjection(Component)) {\n    head += chunkToString(result, maybeRenderHead());\n  }\n  try {\n    const destination = {\n      write(chunk) {\n        if (isPage && !result.partial && !renderedFirstPageChunk) {\n          renderedFirstPageChunk = true;\n          if (!/<!doctype html/i.test(String(chunk))) {\n            const doctype = result.compressHTML ? \"<!DOCTYPE html>\" : \"<!DOCTYPE html>\\n\";\n            str += doctype + head;\n          }\n        }\n        if (chunk instanceof Response) return;\n        str += chunkToString(result, chunk);\n      }\n    };\n    const renderInstance = await renderComponent(result, displayName, Component, props, slots);\n    await renderInstance.render(destination);\n  } catch (e) {\n    if (AstroError.is(e) && !e.loc) {\n      e.setLocation({\n        file: route?.component\n      });\n    }\n    throw e;\n  }\n  return str;\n}\nfunction nonAstroPageNeedsHeadInjection(pageComponent) {\n  return !!pageComponent?.[needsHeadRenderingSymbol];\n}\nexport {\n  renderComponent,\n  renderComponentToString\n};\n", "import { AstroJSX, isVNode } from \"../../jsx-runtime/index.js\";\nimport {\n  HTMLString,\n  escapeHTML,\n  markHTMLString,\n  renderToString,\n  spreadAttributes,\n  voidElementNames\n} from \"./index.js\";\nimport { renderComponentToString } from \"./render/component.js\";\nconst ClientOnlyPlaceholder = \"astro-client-only\";\nconst hasTriedRenderComponentSymbol = Symbol(\"hasTriedRenderComponent\");\nasync function renderJSX(result, vnode) {\n  switch (true) {\n    case vnode instanceof HTMLString:\n      if (vnode.toString().trim() === \"\") {\n        return \"\";\n      }\n      return vnode;\n    case typeof vnode === \"string\":\n      return markHTMLString(escapeHTML(vnode));\n    case typeof vnode === \"function\":\n      return vnode;\n    case (!vnode && vnode !== 0):\n      return \"\";\n    case Array.isArray(vnode):\n      return markHTMLString(\n        (await Promise.all(vnode.map((v) => renderJSX(result, v)))).join(\"\")\n      );\n  }\n  return renderJSXVNode(result, vnode);\n}\nasync function renderJSXVNode(result, vnode) {\n  if (isVNode(vnode)) {\n    switch (true) {\n      case !vnode.type: {\n        throw new Error(`Unable to render ${result.pathname} because it contains an undefined Component!\nDid you forget to import the component or is it possible there is a typo?`);\n      }\n      case vnode.type === Symbol.for(\"astro:fragment\"):\n        return renderJSX(result, vnode.props.children);\n      case vnode.type.isAstroComponentFactory: {\n        let props = {};\n        let slots = {};\n        for (const [key, value] of Object.entries(vnode.props ?? {})) {\n          if (key === \"children\" || value && typeof value === \"object\" && value[\"$$slot\"]) {\n            slots[key === \"children\" ? \"default\" : key] = () => renderJSX(result, value);\n          } else {\n            props[key] = value;\n          }\n        }\n        const str = await renderToString(result, vnode.type, props, slots);\n        if (str instanceof Response) {\n          throw str;\n        }\n        const html = markHTMLString(str);\n        return html;\n      }\n      case (!vnode.type && vnode.type !== 0):\n        return \"\";\n      case (typeof vnode.type === \"string\" && vnode.type !== ClientOnlyPlaceholder):\n        return markHTMLString(await renderElement(result, vnode.type, vnode.props ?? {}));\n    }\n    if (vnode.type) {\n      let extractSlots2 = function(child) {\n        if (Array.isArray(child)) {\n          return child.map((c) => extractSlots2(c));\n        }\n        if (!isVNode(child)) {\n          _slots.default.push(child);\n          return;\n        }\n        if (\"slot\" in child.props) {\n          _slots[child.props.slot] = [..._slots[child.props.slot] ?? [], child];\n          delete child.props.slot;\n          return;\n        }\n        _slots.default.push(child);\n      };\n      var extractSlots = extractSlots2;\n      if (typeof vnode.type === \"function\" && vnode.props[\"server:root\"]) {\n        const output2 = await vnode.type(vnode.props ?? {});\n        return await renderJSX(result, output2);\n      }\n      if (typeof vnode.type === \"function\") {\n        if (vnode.props[hasTriedRenderComponentSymbol]) {\n          delete vnode.props[hasTriedRenderComponentSymbol];\n          const output2 = await vnode.type(vnode.props ?? {});\n          if (output2?.[AstroJSX] || !output2) {\n            return await renderJSXVNode(result, output2);\n          } else {\n            return;\n          }\n        } else {\n          vnode.props[hasTriedRenderComponentSymbol] = true;\n        }\n      }\n      const { children = null, ...props } = vnode.props ?? {};\n      const _slots = {\n        default: []\n      };\n      extractSlots2(children);\n      for (const [key, value] of Object.entries(props)) {\n        if (value?.[\"$$slot\"]) {\n          _slots[key] = value;\n          delete props[key];\n        }\n      }\n      const slotPromises = [];\n      const slots = {};\n      for (const [key, value] of Object.entries(_slots)) {\n        slotPromises.push(\n          renderJSX(result, value).then((output2) => {\n            if (output2.toString().trim().length === 0) return;\n            slots[key] = () => output2;\n          })\n        );\n      }\n      await Promise.all(slotPromises);\n      let output;\n      if (vnode.type === ClientOnlyPlaceholder && vnode.props[\"client:only\"]) {\n        output = await renderComponentToString(\n          result,\n          vnode.props[\"client:display-name\"] ?? \"\",\n          null,\n          props,\n          slots\n        );\n      } else {\n        output = await renderComponentToString(\n          result,\n          typeof vnode.type === \"function\" ? vnode.type.name : vnode.type,\n          vnode.type,\n          props,\n          slots\n        );\n      }\n      return markHTMLString(output);\n    }\n  }\n  return markHTMLString(`${vnode}`);\n}\nasync function renderElement(result, tag, { children, ...props }) {\n  return markHTMLString(\n    `<${tag}${spreadAttributes(props)}${markHTMLString(\n      (children == null || children == \"\") && voidElementNames.test(tag) ? `/>` : `>${children == null ? \"\" : await renderJSX(result, prerenderElementChildren(tag, children))}</${tag}>`\n    )}`\n  );\n}\nfunction prerenderElementChildren(tag, children) {\n  if (typeof children === \"string\" && (tag === \"style\" || tag === \"script\")) {\n    return markHTMLString(children);\n  } else {\n    return children;\n  }\n}\nexport {\n  renderJSX\n};\n", "import cssesc from \"cssesc\";\nimport { fade, slide } from \"../../transitions/index.js\";\nimport { markHTMLString } from \"./escape.js\";\nconst transitionNameMap = /* @__PURE__ */ new WeakMap();\nfunction incrementTransitionNumber(result) {\n  let num = 1;\n  if (transitionNameMap.has(result)) {\n    num = transitionNameMap.get(result) + 1;\n  }\n  transitionNameMap.set(result, num);\n  return num;\n}\nfunction createTransitionScope(result, hash) {\n  const num = incrementTransitionNumber(result);\n  return `astro-${hash}-${num}`;\n}\nconst getAnimations = (name) => {\n  if (name === \"fade\") return fade();\n  if (name === \"slide\") return slide();\n  if (typeof name === \"object\") return name;\n};\nconst addPairs = (animations, stylesheet) => {\n  for (const [direction, images] of Object.entries(animations)) {\n    for (const [image, rules] of Object.entries(images)) {\n      stylesheet.addAnimationPair(direction, image, rules);\n    }\n  }\n};\nconst reEncodeValidChars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_\".split(\"\").reduce((v, c) => (v[c.charCodeAt(0)] = c, v), []);\nconst reEncodeInValidStart = \"-0123456789_\".split(\"\").reduce((v, c) => (v[c.charCodeAt(0)] = c, v), []);\nfunction reEncode(s) {\n  let result = \"\";\n  let codepoint;\n  for (let i = 0; i < s.length; i += (codepoint ?? 0) > 65535 ? 2 : 1) {\n    codepoint = s.codePointAt(i);\n    if (codepoint !== void 0) {\n      result += codepoint < 128 ? codepoint === 95 ? \"__\" : reEncodeValidChars[codepoint] ?? \"_\" + codepoint.toString(16).padStart(2, \"0\") : String.fromCodePoint(codepoint);\n    }\n  }\n  return reEncodeInValidStart[result.codePointAt(0) ?? 0] ? \"_\" + result : result;\n}\nfunction renderTransition(result, hash, animationName, transitionName) {\n  if (typeof (transitionName ?? \"\") !== \"string\") {\n    throw new Error(`Invalid transition name {${transitionName}}`);\n  }\n  if (!animationName) animationName = \"fade\";\n  const scope = createTransitionScope(result, hash);\n  const name = transitionName ? cssesc(reEncode(transitionName), { isIdentifier: true }) : scope;\n  const sheet = new ViewTransitionStyleSheet(scope, name);\n  const animations = getAnimations(animationName);\n  if (animations) {\n    addPairs(animations, sheet);\n  } else if (animationName === \"none\") {\n    sheet.addFallback(\"old\", \"animation: none; mix-blend-mode: normal;\");\n    sheet.addModern(\"old\", \"animation: none; opacity: 0; mix-blend-mode: normal;\");\n    sheet.addAnimationRaw(\"new\", \"animation: none; mix-blend-mode: normal;\");\n    sheet.addModern(\"group\", \"animation: none\");\n  }\n  result._metadata.extraHead.push(markHTMLString(`<style>${sheet.toString()}</style>`));\n  return scope;\n}\nfunction createAnimationScope(transitionName, animations) {\n  const hash = Math.random().toString(36).slice(2, 8);\n  const scope = `astro-${hash}`;\n  const sheet = new ViewTransitionStyleSheet(scope, transitionName);\n  addPairs(animations, sheet);\n  return { scope, styles: sheet.toString().replaceAll('\"', \"\") };\n}\nclass ViewTransitionStyleSheet {\n  constructor(scope, name) {\n    this.scope = scope;\n    this.name = name;\n  }\n  modern = [];\n  fallback = [];\n  toString() {\n    const { scope, name } = this;\n    const [modern, fallback] = [this.modern, this.fallback].map((rules) => rules.join(\"\"));\n    return [\n      `[data-astro-transition-scope=\"${scope}\"] { view-transition-name: ${name}; }`,\n      this.layer(modern),\n      fallback\n    ].join(\"\");\n  }\n  layer(cssText) {\n    return cssText ? `@layer astro { ${cssText} }` : \"\";\n  }\n  addRule(target, cssText) {\n    this[target].push(cssText);\n  }\n  addAnimationRaw(image, animation) {\n    this.addModern(image, animation);\n    this.addFallback(image, animation);\n  }\n  addModern(image, animation) {\n    const { name } = this;\n    this.addRule(\"modern\", `::view-transition-${image}(${name}) { ${animation} }`);\n  }\n  addFallback(image, animation) {\n    const { scope } = this;\n    this.addRule(\n      \"fallback\",\n      // Two selectors here, the second in case there is an animation on the root.\n      `[data-astro-transition-fallback=\"${image}\"] [data-astro-transition-scope=\"${scope}\"],\n\t\t\t[data-astro-transition-fallback=\"${image}\"][data-astro-transition-scope=\"${scope}\"] { ${animation} }`\n    );\n  }\n  addAnimationPair(direction, image, rules) {\n    const { scope, name } = this;\n    const animation = stringifyAnimation(rules);\n    const prefix = direction === \"backwards\" ? `[data-astro-transition=back]` : direction === \"forwards\" ? \"\" : `[data-astro-transition=${direction}]`;\n    this.addRule(\"modern\", `${prefix}::view-transition-${image}(${name}) { ${animation} }`);\n    this.addRule(\n      \"fallback\",\n      `${prefix}[data-astro-transition-fallback=\"${image}\"] [data-astro-transition-scope=\"${scope}\"],\n\t\t\t${prefix}[data-astro-transition-fallback=\"${image}\"][data-astro-transition-scope=\"${scope}\"] { ${animation} }`\n    );\n  }\n}\nfunction addAnimationProperty(builder, prop, value) {\n  let arr = builder[prop];\n  if (Array.isArray(arr)) {\n    arr.push(value.toString());\n  } else {\n    builder[prop] = [value.toString()];\n  }\n}\nfunction animationBuilder() {\n  return {\n    toString() {\n      let out = \"\";\n      for (let k in this) {\n        let value = this[k];\n        if (Array.isArray(value)) {\n          out += `\n\t${k}: ${value.join(\", \")};`;\n        }\n      }\n      return out;\n    }\n  };\n}\nfunction stringifyAnimation(anim) {\n  if (Array.isArray(anim)) {\n    return stringifyAnimations(anim);\n  } else {\n    return stringifyAnimations([anim]);\n  }\n}\nfunction stringifyAnimations(anims) {\n  const builder = animationBuilder();\n  for (const anim of anims) {\n    if (anim.duration) {\n      addAnimationProperty(builder, \"animation-duration\", toTimeValue(anim.duration));\n    }\n    if (anim.easing) {\n      addAnimationProperty(builder, \"animation-timing-function\", anim.easing);\n    }\n    if (anim.direction) {\n      addAnimationProperty(builder, \"animation-direction\", anim.direction);\n    }\n    if (anim.delay) {\n      addAnimationProperty(builder, \"animation-delay\", anim.delay);\n    }\n    if (anim.fillMode) {\n      addAnimationProperty(builder, \"animation-fill-mode\", anim.fillMode);\n    }\n    addAnimationProperty(builder, \"animation-name\", anim.name);\n  }\n  return builder.toString();\n}\nfunction toTimeValue(num) {\n  return typeof num === \"number\" ? num + \"ms\" : num;\n}\nexport {\n  createAnimationScope,\n  createTransitionScope,\n  renderTransition\n};\n", "import {\n  renderComponent,\n  renderTemplate\n} from \"../../runtime/server/index.js\";\nimport { isAstroComponentFactory } from \"../../runtime/server/render/astro/factory.js\";\nimport { createSlotValueFromString } from \"../../runtime/server/render/slot.js\";\nimport { decryptString } from \"../encryption.js\";\nimport { getPattern } from \"../routing/manifest/pattern.js\";\nconst SERVER_ISLAND_ROUTE = \"/_server-islands/[name]\";\nconst SERVER_ISLAND_COMPONENT = \"_server-islands.astro\";\nconst SERVER_ISLAND_BASE_PREFIX = \"_server-islands\";\nfunction getServerIslandRouteData(config) {\n  const segments = [\n    [{ content: \"_server-islands\", dynamic: false, spread: false }],\n    [{ content: \"name\", dynamic: true, spread: false }]\n  ];\n  const route = {\n    type: \"page\",\n    component: SERVER_ISLAND_COMPONENT,\n    generate: () => \"\",\n    params: [\"name\"],\n    segments,\n    pattern: getPattern(segments, config.base, config.trailingSlash),\n    prerender: false,\n    isIndex: false,\n    fallbackRoutes: [],\n    route: SERVER_ISLAND_ROUTE,\n    origin: \"internal\"\n  };\n  return route;\n}\nfunction injectServerIslandRoute(config, routeManifest) {\n  routeManifest.routes.unshift(getServerIslandRouteData(config));\n}\nfunction badRequest(reason) {\n  return new Response(null, {\n    status: 400,\n    statusText: \"Bad request: \" + reason\n  });\n}\nasync function getRequestData(request) {\n  switch (request.method) {\n    case \"GET\": {\n      const url = new URL(request.url);\n      const params = url.searchParams;\n      if (!params.has(\"s\") || !params.has(\"e\") || !params.has(\"p\")) {\n        return badRequest(\"Missing required query parameters.\");\n      }\n      const rawSlots = params.get(\"s\");\n      try {\n        return {\n          componentExport: params.get(\"e\"),\n          encryptedProps: params.get(\"p\"),\n          slots: JSON.parse(rawSlots)\n        };\n      } catch {\n        return badRequest(\"Invalid slots format.\");\n      }\n    }\n    case \"POST\": {\n      try {\n        const raw = await request.text();\n        const data = JSON.parse(raw);\n        return data;\n      } catch {\n        return badRequest(\"Request format is invalid.\");\n      }\n    }\n    default: {\n      return new Response(null, { status: 405 });\n    }\n  }\n}\nfunction createEndpoint(manifest) {\n  const page = async (result) => {\n    const params = result.params;\n    if (!params.name) {\n      return new Response(null, {\n        status: 400,\n        statusText: \"Bad request\"\n      });\n    }\n    const componentId = params.name;\n    const data = await getRequestData(result.request);\n    if (data instanceof Response) {\n      return data;\n    }\n    const imp = manifest.serverIslandMap?.get(componentId);\n    if (!imp) {\n      return new Response(null, {\n        status: 404,\n        statusText: \"Not found\"\n      });\n    }\n    const key = await manifest.key;\n    const encryptedProps = data.encryptedProps;\n    const propString = encryptedProps === \"\" ? \"{}\" : await decryptString(key, encryptedProps);\n    const props = JSON.parse(propString);\n    const componentModule = await imp();\n    let Component = componentModule[data.componentExport];\n    const slots = {};\n    for (const prop in data.slots) {\n      slots[prop] = createSlotValueFromString(data.slots[prop]);\n    }\n    result.response.headers.set(\"X-Robots-Tag\", \"noindex\");\n    if (isAstroComponentFactory(Component)) {\n      const ServerIsland = Component;\n      Component = function(...args) {\n        return ServerIsland.apply(this, args);\n      };\n      Object.assign(Component, ServerIsland);\n      Component.propagation = \"self\";\n    }\n    return renderTemplate`${renderComponent(result, \"Component\", Component, props, slots)}`;\n  };\n  page.isAstroComponentFactory = true;\n  const instance = {\n    default: page,\n    partial: true\n  };\n  return instance;\n}\nexport {\n  SERVER_ISLAND_BASE_PREFIX,\n  SERVER_ISLAND_COMPONENT,\n  SERVER_ISLAND_ROUTE,\n  createEndpoint,\n  getServerIslandRouteData,\n  injectServerIslandRoute\n};\n", "import { redirectIsExternal } from \"../redirects/render.js\";\nimport { SERVER_ISLAND_BASE_PREFIX, SERVER_ISLAND_COMPONENT } from \"../server-islands/endpoint.js\";\nfunction matchRoute(pathname, manifest) {\n  return manifest.routes.find((route) => {\n    return route.pattern.test(pathname) || route.fallbackRoutes.some((fallbackRoute) => fallbackRoute.pattern.test(pathname));\n  });\n}\nfunction matchAllRoutes(pathname, manifest) {\n  return manifest.routes.filter((route) => route.pattern.test(pathname));\n}\nconst ROUTE404_RE = /^\\/404\\/?$/;\nconst ROUTE500_RE = /^\\/500\\/?$/;\nfunction isRoute404(route) {\n  return ROUTE404_RE.test(route);\n}\nfunction isRoute500(route) {\n  return ROUTE500_RE.test(route);\n}\nfunction isRoute404or500(route) {\n  return isRoute404(route.route) || isRoute500(route.route);\n}\nfunction isRouteServerIsland(route) {\n  return route.component === SERVER_ISLAND_COMPONENT;\n}\nfunction isRequestServerIsland(request, base = \"\") {\n  const url = new URL(request.url);\n  const pathname = base === \"/\" ? url.pathname.slice(base.length) : url.pathname.slice(base.length + 1);\n  return pathname.startsWith(SERVER_ISLAND_BASE_PREFIX);\n}\nfunction requestIs404Or500(request, base = \"\") {\n  const url = new URL(request.url);\n  const pathname = url.pathname.slice(base.length);\n  return isRoute404(pathname) || isRoute500(pathname);\n}\nfunction isRouteExternalRedirect(route) {\n  return !!(route.type === \"redirect\" && route.redirect && redirectIsExternal(route.redirect));\n}\nexport {\n  isRequestServerIsland,\n  isRoute404,\n  isRoute404or500,\n  isRoute500,\n  isRouteExternalRedirect,\n  isRouteServerIsland,\n  matchAllRoutes,\n  matchRoute,\n  requestIs404Or500\n};\n", "import { REROUTE_DIRECTIVE_HEADER, ROUTE_TYPE_HEADER } from \"../core/constants.js\";\nimport { isRequestServerIsland, requestIs404Or500 } from \"../core/routing/match.js\";\nimport {\n  normalizeTheLocale,\n  notFound,\n  redirectToDefaultLocale,\n  redirectToFallback,\n  requestHasLocale\n} from \"./index.js\";\nfunction createI18nMiddleware(i18n, base, trailingSlash, format) {\n  if (!i18n) return (_, next) => next();\n  const payload = {\n    ...i18n,\n    trailingSlash,\n    base,\n    format,\n    domains: {}\n  };\n  const _redirectToDefaultLocale = redirectToDefaultLocale(payload);\n  const _noFoundForNonLocaleRoute = notFound(payload);\n  const _requestHasLocale = requestHasLocale(payload.locales);\n  const _redirectToFallback = redirectToFallback(payload);\n  const prefixAlways = (context, response) => {\n    const url = context.url;\n    if (url.pathname === base + \"/\" || url.pathname === base) {\n      return _redirectToDefaultLocale(context);\n    } else if (!_requestHasLocale(context)) {\n      return _noFoundForNonLocaleRoute(context, response);\n    }\n    return void 0;\n  };\n  const prefixOtherLocales = (context, response) => {\n    let pathnameContainsDefaultLocale = false;\n    const url = context.url;\n    for (const segment of url.pathname.split(\"/\")) {\n      if (normalizeTheLocale(segment) === normalizeTheLocale(i18n.defaultLocale)) {\n        pathnameContainsDefaultLocale = true;\n        break;\n      }\n    }\n    if (pathnameContainsDefaultLocale) {\n      const newLocation = url.pathname.replace(`/${i18n.defaultLocale}`, \"\");\n      response.headers.set(\"Location\", newLocation);\n      return _noFoundForNonLocaleRoute(context);\n    }\n    return void 0;\n  };\n  return async (context, next) => {\n    const response = await next();\n    const type = response.headers.get(ROUTE_TYPE_HEADER);\n    const isReroute = response.headers.get(REROUTE_DIRECTIVE_HEADER);\n    if (isReroute === \"no\" && typeof i18n.fallback === \"undefined\") {\n      return response;\n    }\n    if (type !== \"page\" && type !== \"fallback\") {\n      return response;\n    }\n    if (requestIs404Or500(context.request, base)) {\n      return response;\n    }\n    if (isRequestServerIsland(context.request, base)) {\n      return response;\n    }\n    const { currentLocale } = context;\n    switch (i18n.strategy) {\n      // NOTE: theoretically, we should never hit this code path\n      case \"manual\": {\n        return response;\n      }\n      case \"domains-prefix-other-locales\": {\n        if (localeHasntDomain(i18n, currentLocale)) {\n          const result = prefixOtherLocales(context, response);\n          if (result) {\n            return result;\n          }\n        }\n        break;\n      }\n      case \"pathname-prefix-other-locales\": {\n        const result = prefixOtherLocales(context, response);\n        if (result) {\n          return result;\n        }\n        break;\n      }\n      case \"domains-prefix-always-no-redirect\": {\n        if (localeHasntDomain(i18n, currentLocale)) {\n          const result = _noFoundForNonLocaleRoute(context, response);\n          if (result) {\n            return result;\n          }\n        }\n        break;\n      }\n      case \"pathname-prefix-always-no-redirect\": {\n        const result = _noFoundForNonLocaleRoute(context, response);\n        if (result) {\n          return result;\n        }\n        break;\n      }\n      case \"pathname-prefix-always\": {\n        const result = prefixAlways(context, response);\n        if (result) {\n          return result;\n        }\n        break;\n      }\n      case \"domains-prefix-always\": {\n        if (localeHasntDomain(i18n, currentLocale)) {\n          const result = prefixAlways(context, response);\n          if (result) {\n            return result;\n          }\n        }\n        break;\n      }\n    }\n    return _redirectToFallback(context, response);\n  };\n}\nfunction localeHasntDomain(i18n, currentLocale) {\n  for (const domainLocale of Object.values(i18n.domainLookupTable)) {\n    if (domainLocale === currentLocale) {\n      return false;\n    }\n  }\n  return true;\n}\nexport {\n  createI18nMiddleware\n};\n", "import { appendForwardSlash, joinPaths } from \"@astrojs/internal-helpers/path\";\nimport { shouldAppendForwardSlash } from \"../core/build/util.js\";\nimport { REROUTE_DIRECTIVE_HEADER } from \"../core/constants.js\";\nimport { MissingLocale, i18nNoLocaleFoundInPath } from \"../core/errors/errors-data.js\";\nimport { AstroError } from \"../core/errors/index.js\";\nimport { createI18nMiddleware } from \"./middleware.js\";\nfunction requestHasLocale(locales) {\n  return function(context) {\n    return pathHasLocale(context.url.pathname, locales);\n  };\n}\nfunction pathHasLocale(path, locales) {\n  const segments = path.split(\"/\");\n  for (const segment of segments) {\n    for (const locale of locales) {\n      if (typeof locale === \"string\") {\n        if (normalizeTheLocale(segment) === normalizeTheLocale(locale)) {\n          return true;\n        }\n      } else if (segment === locale.path) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction getLocaleRelativeUrl({\n  locale,\n  base,\n  locales: _locales,\n  trailingSlash,\n  format,\n  path,\n  prependWith,\n  normalizeLocale = true,\n  strategy = \"pathname-prefix-other-locales\",\n  defaultLocale\n}) {\n  const codeToUse = peekCodePathToUse(_locales, locale);\n  if (!codeToUse) {\n    throw new AstroError({\n      ...MissingLocale,\n      message: MissingLocale.message(locale)\n    });\n  }\n  const pathsToJoin = [base, prependWith];\n  const normalizedLocale = normalizeLocale ? normalizeTheLocale(codeToUse) : codeToUse;\n  if (strategy === \"pathname-prefix-always\" || strategy === \"pathname-prefix-always-no-redirect\" || strategy === \"domains-prefix-always\" || strategy === \"domains-prefix-always-no-redirect\") {\n    pathsToJoin.push(normalizedLocale);\n  } else if (locale !== defaultLocale) {\n    pathsToJoin.push(normalizedLocale);\n  }\n  pathsToJoin.push(path);\n  let relativePath;\n  if (shouldAppendForwardSlash(trailingSlash, format)) {\n    relativePath = appendForwardSlash(joinPaths(...pathsToJoin));\n  } else {\n    relativePath = joinPaths(...pathsToJoin);\n  }\n  if (relativePath === \"\") {\n    return \"/\";\n  }\n  return relativePath;\n}\nfunction getLocaleAbsoluteUrl({ site, isBuild, ...rest }) {\n  const localeUrl = getLocaleRelativeUrl(rest);\n  const { domains, locale } = rest;\n  let url;\n  if (isBuild && domains && domains[locale]) {\n    const base = domains[locale];\n    url = joinPaths(base, localeUrl.replace(`/${rest.locale}`, \"\"));\n  } else {\n    if (localeUrl === \"/\") {\n      url = site || \"/\";\n    } else if (site) {\n      url = joinPaths(site, localeUrl);\n    } else {\n      url = localeUrl;\n    }\n  }\n  if (shouldAppendForwardSlash(rest.trailingSlash, rest.format)) {\n    return appendForwardSlash(url);\n  } else {\n    return url;\n  }\n}\nfunction getLocaleRelativeUrlList({\n  locales: _locales,\n  ...rest\n}) {\n  const locales = toPaths(_locales);\n  return locales.map((locale) => {\n    return getLocaleRelativeUrl({ ...rest, locales, locale });\n  });\n}\nfunction getLocaleAbsoluteUrlList(params) {\n  const locales = toCodes(params.locales);\n  return locales.map((currentLocale) => {\n    return getLocaleAbsoluteUrl({ ...params, locale: currentLocale });\n  });\n}\nfunction getPathByLocale(locale, locales) {\n  for (const loopLocale of locales) {\n    if (typeof loopLocale === \"string\") {\n      if (loopLocale === locale) {\n        return loopLocale;\n      }\n    } else {\n      for (const code of loopLocale.codes) {\n        if (code === locale) {\n          return loopLocale.path;\n        }\n      }\n    }\n  }\n  throw new AstroError(i18nNoLocaleFoundInPath);\n}\nfunction getLocaleByPath(path, locales) {\n  for (const locale of locales) {\n    if (typeof locale !== \"string\") {\n      if (locale.path === path) {\n        const code = locale.codes.at(0);\n        if (code === void 0) throw new AstroError(i18nNoLocaleFoundInPath);\n        return code;\n      }\n    } else if (locale === path) {\n      return locale;\n    }\n  }\n  throw new AstroError(i18nNoLocaleFoundInPath);\n}\nfunction normalizeTheLocale(locale) {\n  return locale.replaceAll(\"_\", \"-\").toLowerCase();\n}\nfunction toCodes(locales) {\n  return locales.map((loopLocale) => {\n    if (typeof loopLocale === \"string\") {\n      return loopLocale;\n    } else {\n      return loopLocale.codes[0];\n    }\n  });\n}\nfunction toPaths(locales) {\n  return locales.map((loopLocale) => {\n    if (typeof loopLocale === \"string\") {\n      return loopLocale;\n    } else {\n      return loopLocale.path;\n    }\n  });\n}\nfunction peekCodePathToUse(locales, locale) {\n  for (const loopLocale of locales) {\n    if (typeof loopLocale === \"string\") {\n      if (loopLocale === locale) {\n        return loopLocale;\n      }\n    } else {\n      for (const code of loopLocale.codes) {\n        if (code === locale) {\n          return loopLocale.path;\n        }\n      }\n    }\n  }\n  return void 0;\n}\nfunction redirectToDefaultLocale({\n  trailingSlash,\n  format,\n  base,\n  defaultLocale\n}) {\n  return function(context, statusCode) {\n    if (shouldAppendForwardSlash(trailingSlash, format)) {\n      return context.redirect(`${appendForwardSlash(joinPaths(base, defaultLocale))}`, statusCode);\n    } else {\n      return context.redirect(`${joinPaths(base, defaultLocale)}`, statusCode);\n    }\n  };\n}\nfunction notFound({ base, locales, fallback }) {\n  return function(context, response) {\n    if (response?.headers.get(REROUTE_DIRECTIVE_HEADER) === \"no\" && typeof fallback === \"undefined\") {\n      return response;\n    }\n    const url = context.url;\n    const isRoot = url.pathname === base + \"/\" || url.pathname === base;\n    if (!(isRoot || pathHasLocale(url.pathname, locales))) {\n      if (response) {\n        response.headers.set(REROUTE_DIRECTIVE_HEADER, \"no\");\n        return new Response(response.body, {\n          status: 404,\n          headers: response.headers\n        });\n      } else {\n        return new Response(null, {\n          status: 404,\n          headers: {\n            [REROUTE_DIRECTIVE_HEADER]: \"no\"\n          }\n        });\n      }\n    }\n    return void 0;\n  };\n}\nfunction redirectToFallback({\n  fallback,\n  locales,\n  defaultLocale,\n  strategy,\n  base,\n  fallbackType\n}) {\n  return async function(context, response) {\n    if (response.status >= 300 && fallback) {\n      const fallbackKeys = fallback ? Object.keys(fallback) : [];\n      const segments = context.url.pathname.split(\"/\");\n      const urlLocale = segments.find((segment) => {\n        for (const locale of locales) {\n          if (typeof locale === \"string\") {\n            if (locale === segment) {\n              return true;\n            }\n          } else if (locale.path === segment) {\n            return true;\n          }\n        }\n        return false;\n      });\n      if (urlLocale && fallbackKeys.includes(urlLocale)) {\n        const fallbackLocale = fallback[urlLocale];\n        const pathFallbackLocale = getPathByLocale(fallbackLocale, locales);\n        let newPathname;\n        if (pathFallbackLocale === defaultLocale && strategy === \"pathname-prefix-other-locales\") {\n          if (context.url.pathname.includes(`${base}`)) {\n            newPathname = context.url.pathname.replace(`/${urlLocale}`, ``);\n          } else {\n            newPathname = context.url.pathname.replace(`/${urlLocale}`, `/`);\n          }\n        } else {\n          newPathname = context.url.pathname.replace(`/${urlLocale}`, `/${pathFallbackLocale}`);\n        }\n        if (fallbackType === \"rewrite\") {\n          return await context.rewrite(newPathname + context.url.search);\n        } else {\n          return context.redirect(newPathname + context.url.search);\n        }\n      }\n    }\n    return response;\n  };\n}\nfunction createMiddleware(i18nManifest, base, trailingSlash, format) {\n  return createI18nMiddleware(i18nManifest, base, trailingSlash, format);\n}\nexport {\n  createMiddleware,\n  getLocaleAbsoluteUrl,\n  getLocaleAbsoluteUrlList,\n  getLocaleByPath,\n  getLocaleRelativeUrl,\n  getLocaleRelativeUrlList,\n  getPathByLocale,\n  normalizeTheLocale,\n  notFound,\n  pathHasLocale,\n  redirectToDefaultLocale,\n  redirectToFallback,\n  requestHasLocale,\n  toCodes,\n  toPaths\n};\n", "import { normalizeTheLocale, toCodes } from \"./index.js\";\nfunction parseLocale(header) {\n  if (header === \"*\") {\n    return [{ locale: header, qualityValue: void 0 }];\n  }\n  const result = [];\n  const localeValues = header.split(\",\").map((str) => str.trim());\n  for (const localeValue of localeValues) {\n    const split = localeValue.split(\";\").map((str) => str.trim());\n    const localeName = split[0];\n    const qualityValue = split[1];\n    if (!split) {\n      continue;\n    }\n    if (qualityValue && qualityValue.startsWith(\"q=\")) {\n      const qualityValueAsFloat = Number.parseFloat(qualityValue.slice(\"q=\".length));\n      if (Number.isNaN(qualityValueAsFloat) || qualityValueAsFloat > 1) {\n        result.push({\n          locale: localeName,\n          qualityValue: void 0\n        });\n      } else {\n        result.push({\n          locale: localeName,\n          qualityValue: qualityValueAsFloat\n        });\n      }\n    } else {\n      result.push({\n        locale: localeName,\n        qualityValue: void 0\n      });\n    }\n  }\n  return result;\n}\nfunction sortAndFilterLocales(browserLocaleList, locales) {\n  const normalizedLocales = toCodes(locales).map(normalizeTheLocale);\n  return browserLocaleList.filter((browserLocale) => {\n    if (browserLocale.locale !== \"*\") {\n      return normalizedLocales.includes(normalizeTheLocale(browserLocale.locale));\n    }\n    return true;\n  }).sort((a, b) => {\n    if (a.qualityValue && b.qualityValue) {\n      return Math.sign(b.qualityValue - a.qualityValue);\n    }\n    return 0;\n  });\n}\nfunction computePreferredLocale(request, locales) {\n  const acceptHeader = request.headers.get(\"Accept-Language\");\n  let result = void 0;\n  if (acceptHeader) {\n    const browserLocaleList = sortAndFilterLocales(parseLocale(acceptHeader), locales);\n    const firstResult = browserLocaleList.at(0);\n    if (firstResult && firstResult.locale !== \"*\") {\n      for (const currentLocale of locales) {\n        if (typeof currentLocale === \"string\") {\n          if (normalizeTheLocale(currentLocale) === normalizeTheLocale(firstResult.locale)) {\n            result = currentLocale;\n          }\n        } else {\n          for (const currentCode of currentLocale.codes) {\n            if (normalizeTheLocale(currentCode) === normalizeTheLocale(firstResult.locale)) {\n              result = currentLocale.path;\n            }\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\nfunction computePreferredLocaleList(request, locales) {\n  const acceptHeader = request.headers.get(\"Accept-Language\");\n  let result = [];\n  if (acceptHeader) {\n    const browserLocaleList = sortAndFilterLocales(parseLocale(acceptHeader), locales);\n    if (browserLocaleList.length === 1 && browserLocaleList.at(0).locale === \"*\") {\n      return locales.map((locale) => {\n        if (typeof locale === \"string\") {\n          return locale;\n        } else {\n          return locale.codes.at(0);\n        }\n      });\n    } else if (browserLocaleList.length > 0) {\n      for (const browserLocale of browserLocaleList) {\n        for (const loopLocale of locales) {\n          if (typeof loopLocale === \"string\") {\n            if (normalizeTheLocale(loopLocale) === normalizeTheLocale(browserLocale.locale)) {\n              result.push(loopLocale);\n            }\n          } else {\n            for (const code of loopLocale.codes) {\n              if (code === browserLocale.locale) {\n                result.push(loopLocale.path);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\nfunction computeCurrentLocale(pathname, locales, defaultLocale) {\n  for (const segment of pathname.split(\"/\")) {\n    for (const locale of locales) {\n      if (typeof locale === \"string\") {\n        if (!segment.includes(locale)) continue;\n        if (normalizeTheLocale(locale) === normalizeTheLocale(segment)) {\n          return locale;\n        }\n      } else {\n        if (locale.path === segment) {\n          return locale.codes.at(0);\n        } else {\n          for (const code of locale.codes) {\n            if (normalizeTheLocale(code) === normalizeTheLocale(segment)) {\n              return code;\n            }\n          }\n        }\n      }\n    }\n  }\n  for (const locale of locales) {\n    if (typeof locale === \"string\") {\n      if (locale === defaultLocale) {\n        return locale;\n      }\n    } else {\n      if (locale.path === defaultLocale) {\n        return locale.codes.at(0);\n      }\n    }\n  }\n}\nfunction toRoutingStrategy(routing, domains) {\n  let strategy;\n  const hasDomains = domains ? Object.keys(domains).length > 0 : false;\n  if (routing === \"manual\") {\n    strategy = \"manual\";\n  } else {\n    if (!hasDomains) {\n      if (routing?.prefixDefaultLocale === true) {\n        if (routing.redirectToDefaultLocale) {\n          strategy = \"pathname-prefix-always\";\n        } else {\n          strategy = \"pathname-prefix-always-no-redirect\";\n        }\n      } else {\n        strategy = \"pathname-prefix-other-locales\";\n      }\n    } else {\n      if (routing?.prefixDefaultLocale === true) {\n        if (routing.redirectToDefaultLocale) {\n          strategy = \"domains-prefix-always\";\n        } else {\n          strategy = \"domains-prefix-always-no-redirect\";\n        }\n      } else {\n        strategy = \"domains-prefix-other-locales\";\n      }\n    }\n  }\n  return strategy;\n}\nconst PREFIX_DEFAULT_LOCALE = /* @__PURE__ */ new Set([\n  \"pathname-prefix-always\",\n  \"domains-prefix-always\",\n  \"pathname-prefix-always-no-redirect\",\n  \"domains-prefix-always-no-redirect\"\n]);\nconst REDIRECT_TO_DEFAULT_LOCALE = /* @__PURE__ */ new Set([\n  \"pathname-prefix-always-no-redirect\",\n  \"domains-prefix-always-no-redirect\"\n]);\nfunction fromRoutingStrategy(strategy, fallbackType) {\n  let routing;\n  if (strategy === \"manual\") {\n    routing = \"manual\";\n  } else {\n    routing = {\n      prefixDefaultLocale: PREFIX_DEFAULT_LOCALE.has(strategy),\n      redirectToDefaultLocale: !REDIRECT_TO_DEFAULT_LOCALE.has(strategy),\n      fallbackType\n    };\n  }\n  return routing;\n}\nfunction toFallbackType(routing) {\n  if (routing === \"manual\") {\n    return \"rewrite\";\n  }\n  return routing.fallbackType;\n}\nexport {\n  computeCurrentLocale,\n  computePreferredLocale,\n  computePreferredLocaleList,\n  fromRoutingStrategy,\n  parseLocale,\n  toFallbackType,\n  toRoutingStrategy\n};\n", "import { IncorrectStrategyForI18n } from \"../core/errors/errors-data.js\";\nimport { AstroError } from \"../core/errors/index.js\";\nimport * as I18nInternals from \"../i18n/index.js\";\nimport { toFallbackType, toRoutingStrategy } from \"../i18n/utils.js\";\nimport { normalizeTheLocale, toCodes, toPaths } from \"../i18n/index.js\";\nconst { trailingSlash, format, site, i18n, isBuild } = (\n  // @ts-expect-error\n  __ASTRO_INTERNAL_I18N_CONFIG__\n);\nconst { defaultLocale, locales, domains, fallback, routing } = i18n;\nconst base = import.meta.env.BASE_URL;\nlet strategy = toRoutingStrategy(routing, domains);\nlet fallbackType = toFallbackType(routing);\nconst noop = (method) => function() {\n  throw new AstroError({\n    ...IncorrectStrategyForI18n,\n    message: IncorrectStrategyForI18n.message(method)\n  });\n};\nconst getRelativeLocaleUrl = (locale, path, options) => I18nInternals.getLocaleRelativeUrl({\n  locale,\n  path,\n  base,\n  trailingSlash,\n  format,\n  defaultLocale,\n  locales,\n  strategy,\n  domains,\n  ...options\n});\nconst getAbsoluteLocaleUrl = (locale, path, options) => I18nInternals.getLocaleAbsoluteUrl({\n  locale,\n  path,\n  base,\n  trailingSlash,\n  format,\n  site,\n  defaultLocale,\n  locales,\n  strategy,\n  domains,\n  isBuild,\n  ...options\n});\nconst getRelativeLocaleUrlList = (path, options) => I18nInternals.getLocaleRelativeUrlList({\n  base,\n  path,\n  trailingSlash,\n  format,\n  defaultLocale,\n  locales,\n  strategy,\n  domains,\n  ...options\n});\nconst getAbsoluteLocaleUrlList = (path, options) => I18nInternals.getLocaleAbsoluteUrlList({\n  site,\n  base,\n  path,\n  trailingSlash,\n  format,\n  defaultLocale,\n  locales,\n  strategy,\n  domains,\n  isBuild,\n  ...options\n});\nconst getPathByLocale = (locale) => I18nInternals.getPathByLocale(locale, locales);\nconst getLocaleByPath = (path) => I18nInternals.getLocaleByPath(path, locales);\nconst pathHasLocale = (path) => I18nInternals.pathHasLocale(path, locales);\nlet redirectToDefaultLocale;\nif (i18n?.routing === \"manual\") {\n  redirectToDefaultLocale = I18nInternals.redirectToDefaultLocale({\n    base,\n    trailingSlash,\n    format,\n    defaultLocale,\n    locales,\n    strategy,\n    domains,\n    fallback,\n    fallbackType\n  });\n} else {\n  redirectToDefaultLocale = noop(\"redirectToDefaultLocale\");\n}\nlet notFound;\nif (i18n?.routing === \"manual\") {\n  notFound = I18nInternals.notFound({\n    base,\n    trailingSlash,\n    format,\n    defaultLocale,\n    locales,\n    strategy,\n    domains,\n    fallback,\n    fallbackType\n  });\n} else {\n  notFound = noop(\"notFound\");\n}\nlet requestHasLocale;\nif (i18n?.routing === \"manual\") {\n  requestHasLocale = I18nInternals.requestHasLocale(locales);\n} else {\n  requestHasLocale = noop(\"requestHasLocale\");\n}\nlet redirectToFallback;\nif (i18n?.routing === \"manual\") {\n  redirectToFallback = I18nInternals.redirectToFallback({\n    base,\n    trailingSlash,\n    format,\n    defaultLocale,\n    locales,\n    strategy,\n    domains,\n    fallback,\n    fallbackType\n  });\n} else {\n  redirectToFallback = noop(\"useFallback\");\n}\nlet middleware;\nif (i18n?.routing === \"manual\") {\n  middleware = (customOptions) => {\n    strategy = toRoutingStrategy(customOptions, {});\n    fallbackType = toFallbackType(customOptions);\n    const manifest = {\n      ...i18n,\n      strategy,\n      domainLookupTable: {},\n      fallbackType,\n      fallback: i18n.fallback\n    };\n    return I18nInternals.createMiddleware(manifest, base, trailingSlash, format);\n  };\n} else {\n  middleware = noop(\"middleware\");\n}\nexport {\n  getAbsoluteLocaleUrl,\n  getAbsoluteLocaleUrlList,\n  getLocaleByPath,\n  getPathByLocale,\n  getRelativeLocaleUrl,\n  getRelativeLocaleUrlList,\n  middleware,\n  normalizeTheLocale,\n  notFound,\n  pathHasLocale,\n  redirectToDefaultLocale,\n  redirectToFallback,\n  requestHasLocale,\n  toCodes,\n  toPaths\n};\n"],
  "mappings": "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",
  "names": ["trailingSlash", "_a", "_a", "EncodingPadding", "DecodingPadding", "EncodingPadding", "DecodingPadding", "encoder", "decoder", "base", "i18n", "base", "trailingSlash", "format", "locales", "base", "trailingSlash", "format", "strategy", "defaultLocale", "site", "isBuild", "domains", "fallback", "fallbackType", "routing", "domains", "strategy", "routing", "noop", "getPathByLocale", "getLocaleByPath", "pathHasLocale", "redirectToDefaultLocale", "notFound", "requestHasLocale", "redirectToFallback"]
}
